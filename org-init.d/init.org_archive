#    -*- mode: org -*-


Archived entries from file c:/Users/70340930/.emacs.d/org-init.d/init.org

* 最初に必要な設定
** 安全な require, load, autoload マクロ
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:03
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 最初に必要な設定
:ARCHIVE_CATEGORY: init
:END:
- [[http://d.hatena.ne.jp/khiker/20091120/emacs_require_load_macro][require/loadに成功/失敗したらメッセージを出すマクロ - とりあえず暇だったし何となく始めたブログ]]
- [[http://www.sodan.org/~knagano/emacs/dotemacs.html][dot.emacs]]
- [[http://e-arrows.sakura.ne.jp/2010/03/macros-in-emacs-el.html][.emacs.elで定義しておくと便利なマクロ - 八発白中]]
#+BEGIN_SRC emacs-lisp +n
;; use like this (my-safe-require 'skk body)
(defmacro my-safe-require (feature &rest body)
  (declare (indent 1))
  `(if (require ,feature nil t)
       (progn
         (message "Require success: %s from %s" ,feature (locate-library (symbol-name ,feature)))
         ,@body)
     (message "Require error: %s" ,feature)))

;; use like this (my-safe-load "skk" body)
(defmacro my-safe-load (name &rest body)
  (declare (indent 1))
  `(if (load ,name t)
       (progn
         (message "Load success: %s from %s" ,name (locate-library ,name))
         ,@body)
     (message "Load error: %s" ,name)))

(defmacro lazyload (func lib &rest body)
  (declare (indent 2))
  `(when (locate-library ,lib)
     ,@(mapcar (lambda (f) `(autoload ',f ,lib nil t)) func)
     (eval-after-load ,lib
       '(progn
          ,@body
          (message "Lazy load success: %s from %s" ,lib (locate-library ,lib))))))
#+END_SRC
* 自作関数
** スペースアルクで検索
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-13 Tue 19:43
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 自作関数
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp +n
(defvar lookup-alc-history nil)
(defun lookup-alc (query)
  "Look up word in English/Japanese dictionaries of the SPACE ALC"
  (interactive
   (list (cond ((use-region-p)
                (buffer-substring-no-properties (region-beginning) (region-end)))
               (t
                (let ((word (thing-at-point 'word)))
                  (read-string "Look up word in ALC: "
                               word lookup-alc-history nil t))))))
  (let ((deactivate-mark t)
        (search-url "http://eow.alc.co.jp/search?q=%s"))
    (browse-url (url-encode-url (format search-url query)))))
(define-key mode-specific-map (kbd "e") 'lookup-alc)
#+END_SRC
** カーソル位置を動かさないスクロール
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:10
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 自作関数
:ARCHIVE_CATEGORY: init
:END:
残念ながら `scroll-preserve-screen-position' でスクロールの制御ができたので自
作した意味はなかった．参考のために残しておく．
#+BEGIN_SRC emacs-lisp +n
;;; 2011-02-06 (Sun)
;; my-count-lines-window が論理行を数えるため，長い行を折り返していると
;; 移動する行数がずれる．めんどくさいので気が向いたら修正する
;; (defun my-scroll-up-half-window ()
;;   "Scroll up half of window-height putting point on line relative to the selected window."
;;   (interactive)
;;   (let ((line (my-count-lines-window)))
;;     (scroll-up (/ (window-height) 2))
;;     (move-to-window-line line)))

;; (defun my-scroll-down-half-window ()
;;   "Scroll down half of window-height putting point on line relative to the selected window."
;;   (interactive)
;;   (let ((line (my-count-lines-window)))
;;     (scroll-down (/ (window-height) 2))
;;     (move-to-window-line line)))

;;; 2011-02-06 (Sun)
;; ちなみに数える行数は論理行である -> 物理行で数えるようにした
;; (defun my-count-lines-window ()
;;   "Count lines relative to the selected window. The number of line begins 0."
;;   (interactive)
;;   (let* (;(deactivate-mark nil)       ; prevent to deactivate region by this command
;;          (window-string (buffer-substring-no-properties (window-start) (point)))
;;          (line-string-list (split-string window-string "\n"))
;;          (line-count 0) line-count-list)
;;     (setq line-count (1- (length line-string-list)))
;;     (unless truncate-lines      ; consider folding back
;;       ;; `line-count-list' is list of the number of physical line which each logical line has.
;;       (setq line-count-list (mapcar '(lambda (str)
;;                                        (/ (my-count-string-columns str) (window-width)))
;;                                     line-string-list))
;;       (setq line-count (+ line-count (apply '+ line-count-list))))
;;     line-count))

;; count string width (columns)
;; (defun my-count-string-columns (str)
;;   "Count columns of string. The number of column begins 0."
;;   (with-temp-buffer
;;     (insert str)
;;     (current-column)))

;; (defun my-count-lines-window ()
;;   "Return line relative to the selected window. The number of line begins 0."
;;   (interactive)
;;   (if (equal (current-column) 0)
;;       (count-lines (window-start) (point))
;;     (1- (count-lines (window-start) (point)))))


;;; scroll-up, down でウィンドウに対する相対的なカーソル位置を動かさないアドバイス
;; (defadvice scroll-up (around scroll-up-relative activate)
;;   "Scroll up relatively without move of cursor."
;;   (let ((line (my-count-lines-window)))
;;     ad-do-it
;;     (move-to-window-line line)))

;; (defadvice scroll-down (around scroll-down-relative activate)
;;   "Scroll down relatively without move of cursor."
;;   (let ((line (my-count-lines-window)))
;;     ad-do-it
;;     (move-to-window-line line)))
#+END_SRC
** uwsc-mode
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:12
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 自作関数
:ARCHIVE_CATEGORY: init
:END:
generic で簡単にメジャーモードを作れる．
#+BEGIN_SRC emacs-lisp +n
;;; 2011-01-23 (Sun)
(define-generic-mode uwsc-generic-mode
  ;; コメントになる文字列の指定
  '("//")
  ;; キーワードの指定
  '("DIM" "PUBLIC" "CONST" "IF" "THEN" "ELSE" "IFB" "ELSEIF" "ENDIF" "SELECT" "CASE" "DEFAULT" "SELEND" "FOR"
    "NEXT" "TO" "STEP" "WHILE" "WEND" "REPEAT" "UNTIL" "CALL" "BREAK" "CONTINUE" "EXIT" "EXITEXIT" "PRINT" "AND" "OR" "XOR"
    "MOD" "PROCEDURE" "FUNCTION" "FEND" "RESULT" "VAR" "DEF" "DLL" "OPTION" "THREAD" "CLASS" "ENDCLASS"
    "THIS" "GLOBAL" "WITH" "ENDWITH" "TEXTBLOCK" "ENDTEXTBLOCK" "HASHTBL" "TRY" "ENDTRY" "EXCEPT" "FINALLY"
    "dim" "public" "const" "if" "then" "else" "ifb" "elseif" "endif" "select" "case" "default" "selend" "for"
    "next" "to" "step" "while" "wend" "repeat" "until" "call" "break" "continue" "exit" "exitexit" "print" "and" "or" "xor"
    "mod" "procedure" "function" "fend" "result" "var" "def" "dll" "option" "thread" "class" "endclass"
    "this" "global" "with" "endwith" "textblock" "endtextblock" "hashtbl" "try" "endtry" "except" "finally"
    "Dim" "Public" "Const" "If" "Then" "Else" "Ifb" "Elseif" "Endif" "Select" "Case" "Default" "Selend" "For"
    "Next" "To" "Step" "While" "Wend" "Repeat" "Until" "Call" "Break" "Continue" "Exit" "Exitexit"  "Print" "And" "Or" "Xor"
    "Mod" "Procedure" "Function" "Fend" "Result" "Var" "Def" "Dll" "Option" "Thread" "Class" "Endclass"
    "This" "Global" "With" "Endwith" "Textblock" "Endtextblock" "Hashtbl" "Try" "Endtry" "Except" "Finally")
  ;; もうちょっと難しいキーワードの指定
  '(("[0-9]+" . font-lock-constant-face))
  ;; auto-mode-alist に追加
  '("\\.uws$")
  nil
  "Major mode for UWSC-generic")
#+END_SRC
** Emacs のフルスクリーン
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:13
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 自作関数
:ARCHIVE_CATEGORY: init
:END:
自作コマンドを作っていたが、Emacs標準で =toggle-frame-fullscreen= が定義され
てるので、これでよし。
#+BEGIN_SRC emacs-lisp +n
;(defun toggle-fullscreen ()
;  (interactive)
;  (set-frame-parameter nil 'fullscreen (if (frame-parameter nil 'fullscreen)
;                                            nil 'fullboth)))
(global-set-key (kbd "<f11>") 'toggle-frame-fullscreen)
#+END_SRC
** ChangeLog と同じ形式で日付曜日挿入
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:13
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 自作関数
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp +n
(defun my-insert-date (&optional time)
  (interactive)
  (unless (boundp 'time)
    (setq time (current-time)))
  (let ((system-time-locale "C"))
    (insert (format-time-string "%Y-%m-%d (%a)" time))))

(defun my-show-date (&optional time)
  (interactive)
  (unless (boundp 'time)
    (setq time (current-time)))
  (let ((system-time-locale "C"))
    (format-time-string "%Y-%m-%d (%a)" time)))
#+END_SRC
** Emacs で印刷する
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:13
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 自作関数
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp +n
(setq my-print-command-format "nkf -e | e2ps -a4 -p -nh | lpr")
(defun my-print-region (begin end)
   (interactive "r")
   (shell-command-on-region begin end my-print-command-format))
(defun my-print-buffer ()
   (interactive)
   (my-print-region (point-min) (point-max)))
#+END_SRC

* その他一般的な動作設定
** Power Line
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:14
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: その他一般的な動作設定
:ARCHIVE_CATEGORY: init
:END:
モードラインを矢印風に装飾する．使ってみたもののモードラインの情報量がだいぶ
減ったのでやっぱり使わないことにした．
- [[http://www.emacswiki.org/emacs-en/PowerLine][EmacsWiki: Power Line]]
- [[http://d.hatena.ne.jp/kenjiskywalker/20120502/1335922233][Emacsにpowerlineを入れてみたら超絶coolだった - kenjiskywalker no memo]]
#+BEGIN_SRC emacs-lisp +n
(defun arrow-right-xpm (color1 color2)
  "Return an XPM right arrow string representing."
  (format "/* XPM */
static char * arrow_right[] = {
\"12 18 2 1\",
\".	c %s\",
\"		c %s\",
\".			  \",
\"..		  \",
\"...		  \",
\"....		  \",
\".....		  \",
\"......	  \",
\".......	  \",
\"........	  \",
\".........	  \",
\".........	  \",
\"........	  \",
\".......	  \",
\"......	  \",
\".....		  \",
\"....		  \",
\"...		  \",
\"..		  \",
\".			  \"};"	 color1 color2))

(defun arrow-left-xpm (color1 color2)
  "Return an XPM right arrow string representing."
  (format "/* XPM */
static char * arrow_right[] = {
\"12 18 2 1\",
\".	c %s\",
\"		c %s\",
\"			 .\",
\"			..\",
\"		   ...\",
\"		  ....\",
\"		 .....\",
\"		......\",
\"	   .......\",
\"	  ........\",
\"	 .........\",
\"	 .........\",
\"	  ........\",
\"	   .......\",
\"		......\",
\"		 .....\",
\"		  ....\",
\"		   ...\",
\"			..\",
\"			 .\"};"	 color2 color1))

(defconst color1 "#555")
(defconst color2 "#333")

(defvar arrow-right-1 (create-image (arrow-right-xpm color1 color2) 'xpm t :ascent 'center))
(defvar arrow-right-2 (create-image (arrow-right-xpm color2 "None") 'xpm t :ascent 'center))
(defvar arrow-left-1  (create-image (arrow-left-xpm color2 color1) 'xpm t :ascent 'center))
(defvar arrow-left-2  (create-image (arrow-left-xpm "None" color2) 'xpm t :ascent 'center))

(defun set-power-line ()
  "Set mode-line to power line."
  (interactive)
  (setq-default mode-line-format
				(list  '(:eval (concat (propertize " %b " 'face 'mode-line-color-1)
									   (propertize " " 'display arrow-right-1)))
					   '(:eval (concat (propertize " %m " 'face 'mode-line-color-2)
									   (propertize " " 'display arrow-right-2)))

					   ;; Justify right by filling with spaces to right fringe - 16
					   ;; (16 should be computed rahter than hardcoded)
					   '(:eval (propertize " " 'display '((space :align-to (- right-fringe 17)))))

					   '(:eval (concat (propertize " " 'display arrow-left-2)
									   (propertize " %p " 'face 'mode-line-color-2)))
					   '(:eval (concat (propertize " " 'display arrow-left-1)
									   (propertize "%4l:%2c	 " 'face 'mode-line-color-1)))
					   ))

  (make-face 'mode-line-color-1)
  (set-face-attribute 'mode-line-color-1 nil
					  :foreground "#fff"
					  :background color1)

  (make-face 'mode-line-color-2)
  (set-face-attribute 'mode-line-color-2 nil
					  :foreground "#fff"
					  :background color2)

  (set-face-attribute 'mode-line nil
					  :foreground "#fff"
					  :background "#000"
					  :box nil)
  (set-face-attribute 'mode-line-inactive nil
					  :foreground "#fff"
					  :background "#000")
  )
(add-hook 'after-init-hook 'set-power-line)
#+END_SRC
* 標準ライブラリ
** open-dribble
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:20
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
キー入力を記録してファイルに保存する．あんまり意味がなかったのでコメントアウ
ト．
#+BEGIN_SRC emacs-lisp +n
;; (defvar my-dribble-file (concat user-emacs-directory ".dribble") "dribble file")
;; (open-dribble-file my-dribble-file)
#+END_SRC

** eshell.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:20
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
Emacs lisp によるシェル．リダイレクトがないのがきつい．
#+BEGIN_SRC emacs-lisp +n
  (use-package eshell :defer t
    :commands (eshell)
    :config
    ;; 補完時に大文字小文字を区別しない
    (setq eshell-cmpl-ignore-case t)
    ;; 確認なしでヒストリ保存
    (setq eshell-ask-to-save-history (quote always))
    ;; 補完時にサイクルする
    (setq eshell-cmpl-cycle-completions t)
    ;;補完候補がこの数値以下だとサイクルせずに候補表示
    (setq eshell-cmpl-cycle-cutoff-length 5)
    ;; 履歴で重複を無視する
    (setq eshell-hist-ignoredups t)
    ;; prompt文字列の変更
    (defun my-eshell-prompt ()
      (concat (eshell/pwd) "\n$ " ))
    (setq eshell-prompt-function 'my-eshell-prompt)
    ;; (setq eshell-prompt-function
    ;;       '(lambda ()
    ;;         (concat "hoge "
    ;;                 (eshell/pwd)
    ;;                 ;(if (= (user-uid) 0) "]\n# " "]\n$ ")
    ;;                 )))
    ;; 変更したprompt文字列に合う形でpromptの初まりを指定(C-aで"$ "の次にカーソルがくるようにする)
    ;; これの設定を上手くしとかないとタブ補完も効かなくなるっぽい
    (setq eshell-prompt-regexp "^[^#$]*[$#] ")

    ;; eshell の解釈を別のパーサで乗っ取り
    (use-package esh-myparser
      :config
      (defun eshell-parser/z (str) (eshell-parser/b str "zsh"))) ; zsh で乗っ取り

    ;; elisp として解釈
    (defun eshell/e (arg) (eval (read (format "%s" arg))))

    ;; eshell の Unix コマンドエミュレーションを無効にする
    (progn
      (defmacro eval-after-load* (name &rest body)
        (declare (indent 1))
        `(eval-after-load ,name '(progn ,@body)))
      (defun eshell-disable-unix-command-emulation ()
        (eval-after-load* "em-ls"
          (fmakunbound 'eshell/ls))
        (eval-after-load* "em-unix"
          (mapc 'fmakunbound '(eshell/agrep
                               eshell/basename
                               eshell/cat
                               eshell/cp
                               eshell/date
                               eshell/diff
                               eshell/dirname
                               eshell/du
                               eshell/egrep
                               eshell/fgrep
                               eshell/glimpse
                               eshell/grep
                               eshell/info
                               eshell/ln
                               eshell/locate
                               eshell/make
                               eshell/man
                               eshell/mkdir
                               eshell/mv
                               eshell/occur
                               eshell/rm
                               eshell/rmdir
                               eshell/su
                               eshell/sudo
                               eshell/time))))
      (eshell-disable-unix-command-emulation))

    ;; eshell のコマンドライン上の挙動を変更する（るびきちメルマガ）
    (defun eshell-in-command-line-p ()
      (<= eshell-last-output-end (point)))
    (defmacro defun-eshell-cmdline (key &rest body)
      (let ((cmd (intern (format "eshell-cmdline/%s" key))))
        `(progn
           (add-hook 'eshell-mode-hook
                     (lambda () (define-key eshell-mode-map (read-kbd-macro ,key) ',cmd)))
           (defun ,cmd ()
             (interactive)
             (if (not (eshell-in-command-line-p))
                 (call-interactively (lookup-key (current-global-map) (read-kbd-macro ,key)))
               ,@body)))))
    (defun eshell-history-and-bol (func)
      (delete-region eshell-last-output-end (point-max))
      (funcall func 1)
      (goto-char (point-max)));eshell-last-output-end))
    ;; コマンドライン上の挙動変更
    (defun-eshell-cmdline "C-p"
      (let ((last-command 'eshell-previous-matching-input-from-input))
        (eshell-history-and-bol 'eshell-previous-matching-input-from-input)))
    (defun-eshell-cmdline "C-n"
      (let ((last-command 'eshell-previous-matching-input-from-input))
        (eshell-history-and-bol 'eshell-next-input)))
    (defun-eshell-cmdline "C-w"
      (delete-region (eshell-bol) (point-max)))
    (defun-eshell-cmdline "M-^"
      (my-minibuffer-delete-parent-directory))
    (defun-eshell-cmdline "C-r"
      (anything-eshell-history))
    ;; `anything-eshell-history' 実行前に recenter する
    (defadvice anything-eshell-history (before recenter-top activate)
      (recenter 1))
    ;; 1回1回履歴のアクセスをリセットする
    (defadvice eshell-send-input (after history-position activate)
      (setq eshell-history-index -1))

    ;; eev と協調
    ;; (defun eeeshell (s &optional e)
    ;;   (interactive "r")
    ;;   (eev s e)
    ;;   (eepitch-eshell)
    ;;   (eepitch-line ". $EE"))
    ;; (setq eepitch-code '(eshell))
    ;; (setq eeb-defaults '(eeeshell ee-delimiter-hash nil t t))
    ;; (eeb-define 'eeeshell-bounded 'eeeshell 'ee-delimiter-hash nil t t)
    ;; (global-set-key (kbd "<f6>") 'eepitch-this-line)
    ;; ;; 文字列入力関数
    ;; (defun eshell/readstr (varname &optional default)
    ;;   "文字列を入力させて変数VARNAMEに記憶する。デフォルト値も指定できる。"
    ;;   (set (intern varname)
    ;;        (read-string (format "%s%s: " varname
    ;;                             (if default (format " (default: %s)" default) ""))
    ;;                     nil nil default)))
    ;; (defun eshell/readfncd (varname)
    ;;   "ファイル名を入力させて変数VARNAMEに記憶し、そのディレクトリに移動する。"
    ;;   (let ((fn (read-file-name (format "%s: " varname))))
    ;;     (eshell/pushd (file-name-directory fn))
    ;;     (set (intern varname) (file-name-nondirectory fn))))
    ;; (defun eshell/readfn (varname)
    ;;   "ファイル名を入力させて変数VARNAMEに記憶する。"
    ;;   (set (intern varname)
    ;;        (file-relative-name (read-file-name (format "%s: " varname)))))
    ;; (defun eshell/readdir (varname)
    ;;   "ディレクトリ名を入力させて変数VARNAMEに記憶する。"
    ;;   (set (intern varname) (read-directory-name (format "%s: " varname))))
    ;; ;; escript
    ;; (eval-after-load "anything"
    ;;   '(progn
    ;;      (defvar anything-c-escript-file-name
    ;;        (expand-file-name "memo/escript.org" dropbox-directory))
    ;;      (defvar anything-c-source-search-escript
    ;;        '((name . "E-script search")
    ;;          (candidates-file anything-c-escript-file-name update)
    ;;          (target-file . anything-c-escript-file-name)
    ;;          (get-line . anything-c-occur-get-line)
    ;;          (recenter)
    ;;          (requires-pattern . 3)
    ;;          (migemo)
    ;;          (type . line)))

    ;;      (defun anything-escript-search ()
    ;;        (interactive)
    ;;        (anything :sources 'anything-c-source-search-escript
    ;;                  :buffer "*anything-escript-search*"
    ;;                  :follow-mode t))
    ;;      ))
    )
#+END_SRC

** generic-x.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:21
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
generic を用いて予め定義されているモード．
#+BEGIN_SRC emacs-lisp +n
;;; (use-package generic-x)
#+END_SRC

** filecache.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:21
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
よく開くファイルやディレクトリをキャッシュとして保存しておく．
#+BEGIN_SRC emacs-lisp +n
;;; find-file の時に C-TAB で補完できる
(use-package filecache :defer t
  :config
  ;; キャッシュするディレクトリを指定。このディレクトリ下のファイルを補完できる
  ;; ディレクトリは対象外らしい
  (file-cache-add-directory-list
   (list "~/.emacs.d/" "~/.emacs.d/auto-install/" "~/.emacs.d/site-lisp")))
#+END_SRC

** skk
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:21
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp +n
(setq skk-user-directory "~/.emacs.d/ddskk/")
(use-package skk-autoloads
  :config
  (global-set-key (kbd "C-x C-j") 'skk-mode)
  (setq skk-byte-compile-init-file t))
#+END_SRC

* 非標準ライブラリ
** anything-advent-calendar.el
:PROPERTIES:
:ARCHIVE_TIME: 2014-11-16 Sun 11:25
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
advent calendar を anything で選んで閲覧．[[http://gongo.hatenablog.com/entry/2011/12/12/000301]]
#+BEGIN_SRC emacs-lisp +n
;(my-safe-require 'anything-advent-calendar)
#+END_SRC
** pukiwiki-mode                                                   :noexport:
:PROPERTIES:
:ARCHIVE_TIME: 2014-11-16 Sun 05:24
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp +n
(my-safe-require 'http)
(lazyload (pukiwiki-edit pukiwiki-index pukiwki-edit-url) "pukiwiki-mode"
  (setq pukiwiki-auto-insert t)
  (setq pukiwiki-site-list
        '(("bibouroku" "http://www.kaichan.mydns.jp/~kai/pukiwiki/index.php" nil utf-8-unix)
          ("gavo" "http://www.gavo.t.u-tokyo.ac.jp/members-only/pukiwiki/index.php" nil utf-8-unix)
          ("minerva" "http://minerva.gavo.t.u-tokyo.ac.jp/wiki/index.php" nil utf-8-unix)
          ("eeic09" "http://eeic09.dip.jp/index.php" nil utf-8-unix)
          ("WebPhantom" "http://ningyokan.nisfan.net/wiki/webpb/index.php" nil euc-jp)
          ("disgaea4" "http://alphawiki.net/disgaea4/index.php" nil euc-jp)))
  ;; Proxy server
  (defun my-http-proxy-enable ()
    (interactive)
    (setq http-proxy-server "localhost")
    (setq http-proxy-port 18080))
  (defun my-http-proxy-disable ()
    (interactive)
    (setq http-proxy-server nil)
    (setq http-proxy-port nil))
  ;; ローカルにファイルを保存する
  (setq pukiwiki-directory (locate-user-emacs-file "pukiwiki-save"))
  (setq pukiwiki-save-post-data t)
  ;; pukiwiki-edit-mode で行を折り返さない
  )
(add-hook 'pukiwiki-edit-mode '(lambda ()
                                 (toggle-truncate-lines 1)
                                 (orgtbl-mode 1)))
#+END_SRC

** mu4e.el                                                         :noexport:
:PROPERTIES:
:ARCHIVE_TIME: 2014-11-16 Sun 06:05
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
新しいメーラー．
#+BEGIN_SRC emacs-lisp +n
(my-safe-require 'mu4e
  ;; 基本設定
  (setq mu4e-headers-date-format "%Y/%m/%d (%a)")
  (setq mu4e-view-prefer-html nil)  ;; html を html のままで表示しない
  (setq mu4e-view-show-addresses t)  ;; 送信者などのメールアドレスを表示する
  (setq mu4e-html2text-command "w3m -dump -T text/html")  ;; html をテキスト表示
  (setq mu4e-split-view 'vertical)  ;; ヘッダバッファの分割方法．左右に分割する
  (setq mu4e-headers-visible-columns 100)  ;; メッセージを開いた時のヘッダバッファの大きさ
  (setq mu4e-show-images t)  ;; 添付された画像をインライン表示する
  (setq mu4e-view-image-max-width 800)  ;; 画像の最大幅．単位はおそらくピクセル
  (set-face-foreground 'mu4e-title-face "deep pink")  ;; タイトル用のフェイス
  (setq mu4e-use-fancy-chars nil) ;; ASCII 文字以外を使って表示しない
  (setq mu4e-headers-fields       ;; human-date を少し広げる
     '((:human-date . 16) (:flags . 6) (:from . 22) (:subject)))
  (define-key mu4e-headers-mode-map (kbd "m") 'mu4e-headers-mark-for-something) ;; マークしやすいようにキーバインド変更
  (define-key mu4e-headers-mode-map (kbd "M") 'mu4e-headers-mark-for-move)
  ;; フォルダ設定
  (setq mu4e-maildir       "~/Maildir"        ;; top-level Maildir
        mu4e-sent-folder   "/gavo/INBOX.Sent"      ;; folder for sent messages
        mu4e-drafts-folder "/gavo/INBOX.Drafts"    ;; unfinished messages
        mu4e-trash-folder  "/gavo/INBOX.Trash"     ;; trashed messages
        mu4e-refile-folder "/gavo/INBOX.Archives") ;; saved messages
  ;; 受信設定
  (setq mu4e-get-mail-command "offlineimap"   ;; or fetchmail, or ...
        mu4e-update-interval 120)             ;; update every 5 minutes
  ;; フォルダ設定
  (setq mu4e-search-results-limit 500) ;; -1 にすると無制限
  (setq mu4e-maildir-shortcuts
        '(("/gavo/INBOX" . ?g)
          ("/gavo/INBOX.onsei-mail" . ?O)
          ("/kbkbkbkb1/INBOX" . ?k)
          ("/kbkbkbkb1/INBOX.mailing-list.Emacs-devel" . ?e)
          ("/kbkbkbkb1/INBOX.mailing-list.Emacs-orgmode" . ?)
          ("/cellphone/INBOX" . ?c)
          ))
  ;; 送信設定
  (setq auth-source-save-behavior nil) ; 認証情報を ~/.authinfo に保存しない
  (add-to-list 'mu4e-user-mail-address-list "kbkbkbkb1@gmail.com")
  (add-to-list 'mu4e-user-mail-address-list "giovanni-franz@ezweb.ne.jp")
  (my-safe-require 'smtpmail
    (setq message-send-mail-function   'smtpmail-send-it
          smtpmail-stream-type 'ssl
          smtpmail-smtp-user           "kai"
          smtpmail-default-smtp-server "smtps.gavo.t.u-tokyo.ac.jp"
          smtpmail-smtp-server         "smtps.gavo.t.u-tokyo.ac.jp"
          smtpmail-smtp-service        465
          smtpmail-local-domain        "gavo.t.u-tokyo.ac.jp"))
  (define-key ctl-x-map (kbd "M") 'mu4e)
  (define-key ctl-x-map (kbd "m") 'mu4e-compose-new)
  ;; guide-key を使う
  (eval-after-load "guide-key"
    '(progn
       (defun guide-key/my-hook-function-for-mu4e-compose ()
         (dolist (key '("C-c" "C-c C-f"))
           (guide-key/add-local-guide-key-sequence key)))
       (add-hook 'mu4e-compose-mode-hook 'guide-key/my-hook-function-for-mu4e-compose)))
#+END_SRC
*** リンクへ移動，開く
カーソルをリンクへ移動．
#+BEGIN_SRC emacs-lisp +n
  (defun mu4e-view-my-goto-next-link (arg)
    "Go to next ARGth `mu4e-view-link-face'."
    (interactive "p")
    (let ((pt (point))
          (search-func (if (>= arg 0)
                           'next-single-property-change
                         'previous-single-property-change)))
      (dotimes (i (abs arg))
        (while (and (setq pt (funcall search-func pt 'face))
                    (not (eq 'mu4e-view-link-face
                             (get-text-property pt 'face))))
          nil)  ; do nothing
        (if pt
            (goto-char pt)
          (error (format "No link %s" (if (>= arg 0) "forward" "backward")))))
      ))
  (defun mu4e-view-my-goto-previous-link (arg)
    "Go to previous ARGth `mu4e-view-link-face'."
    (interactive "p")
    (mu4e-view-my-goto-next-link (- arg)))
  (define-key mu4e-view-mode-map (kbd "<tab>") 'mu4e-view-my-goto-next-link)
  (define-key mu4e-view-mode-map (kbd "<backtab>") 'mu4e-view-my-goto-previous-link)
#+END_SRC

カーソル下のリンクを開く．
#+BEGIN_SRC emacs-lisp +n
  (defun mu4e-view-my-get-link-at-point ()
    "Get mu4e link at point."
    ;; Not consider the case that link is at the beginning of buffer or at
    ;; the end of buffer
    (let ((pt (point)))
      (when (eq 'mu4e-view-link-face (get-text-property pt 'face))
        (if (eq 'mu4e-view-link-face (get-text-property (1- pt) 'face))
            ;; point is inside of link
            (buffer-substring-no-properties (previous-single-property-change pt 'face)
                                            (next-single-property-change pt 'face))
          ;; point is at the top of link
          (buffer-substring-no-properties pt (next-single-property-change pt 'face)))
        )))

  (defun mu4e-view-my-link-action-dwim (&optional arg)
    "Do action according to link at point. If link is url, open it with browser.
  If link is attachment, do the first action of `mu4e-view-attachment-actions'.
  If ARG is non-nil, select an action from `mu4e-view-attachment-actions'."
    (interactive "P")
    (let ((msg (or (mu4e-message-at-point)
                   (error "Message not found here")))
          (link (or (mu4e-view-my-get-link-at-point)
                    (error "Link not found here"))))
      (if (string-match mu4e~view-url-regexp link)
          (browse-url link)
        (let ((actionfunc (if arg
                              (mu4e-read-option "Action on attachment: "
                                                mu4e-view-attachment-actions)
                            (cdar mu4e-view-attachment-actions)))
              (attnum (or (mu4e-view-my-get-attachment-number link)
                          (mu4e~view-get-attach-num "Which attachment" msg))))
          (when (and actionfunc attnum)
            (funcall actionfunc msg attnum))))))

  (defun mu4e-view-my-get-attachment-number (name)
    "Get an attachment number from NAME of link."
    (save-excursion
      (goto-char (point-min))
      (when (and name
                 (re-search-forward (format "\\[\\([0-9]+\\)\\]%s" name) nil t))
        (string-to-int (match-string 1)))))

  (add-to-list 'mu4e-view-attachment-actions
               (cons "oopen-external" 'mu4e-view-open-attachment))
  (define-key mu4e-view-mode-map (kbd "RET") 'mu4e-view-my-link-action-dwim)
#+END_SRC
*** 特定のフォルダのみのメールを取得する
特定のフォルダのメールをダウンロードするコマンドを作った．理想的には
`mu4e-update-mail-and-index' の引数で挙動が変えられるようにしたほうがいいかも．
さらに抽象化するために，maildir からアカウントとフォルダに写像する関数とか書い
たほうがいいと思われる．
#+BEGIN_SRC emacs-lisp +n
  (defun mu4e-update-mail-and-index-partially (run-in-background)
    "Get a new mail by running `mu4e-get-mail-command'. If
  run-in-background is non-nil (or functional called with
  prefix-argument), run in the background; otherwise, pop up a
  window."
    (interactive "P")
    (unless mu4e-get-mail-command
      (mu4e-error "`mu4e-get-mail-command' is not defined"))
    (let* ((buf (unless run-in-background
                  (get-buffer-create mu4e~update-name)))
            (win (and buf (split-window (selected-window)
                            (- (window-height (selected-window)) 8))))
            (process-connection-type t)
            (command (mu4e~command-partial-update (mu4e-my-guess-maildir)))
            (proc (start-process-shell-command mu4e~update-name buf command)))
      (mu4e-message "Retrieving mail...")
      (when (window-live-p win)
        (with-selected-window win
          (switch-to-buffer buf)
          (set-window-dedicated-p win t)
          (erase-buffer)
          (insert "\n"))) ;; FIXME -- needed so output starts
      (set-process-sentinel proc
        (lambda (proc msg)
          (let* ((status (process-status proc))
                  (code (process-exit-status proc))
                  ;; sadly, fetchmail returns '1' when there is no mail; this is
                  ;; not really an error of course, but it's hard to distinguish
                  ;; from a genuine error
                  (maybe-error (or (not (eq status 'exit)) (/= code 0)))
                  (buf (process-buffer proc)))
            (message nil)
            ;; there may be an error, give the user up to 5 seconds to check
            (when maybe-error (sit-for 5))
            (mu4e-update-index)
            (when (buffer-live-p buf) (kill-buffer buf)))))
      ;; if we're running in the foreground, handle password requests
      (unless run-in-background
        (process-put proc 'x-interactive (not run-in-background))
        (set-process-filter proc 'mu4e~get-mail-process-filter))))

  (defun mu4e~command-partial-update (maildir)
    "Return a command for mu4e to update mail partially."
    (if (string-match "^/\\([^/\n]+\\)/\\([^/\n]+\\)" maildir)
        (let ((account (match-string 1 maildir))
              (folder  (utf7-encode (replace-regexp-in-string
                                     "\\." "/" (match-string 2 maildir)) 'imap)))
          (cond ((string= mu4e-get-mail-command "offlineimap")
                 (concat mu4e-get-mail-command
                         " -a " account
                         " -f " "'" folder "'"))
                (t (error "Not implemeqnted yet"))))
      (error (format "Invalid maildir: %s" maildir))))
#+END_SRC
*** 次のフォルダに移動するコマンド
何かとあれば便利かと思って次のフォルダに直接移動するコマンドを作った．大きく
移動する場合は helm で移動がよろしい．
#+BEGIN_SRC emacs-lisp +n
  (defun mu4e-my-next-maildir (arg)
    "Move to a next maildir. This function get a current maildir
  from a message at point or last query."
    (interactive "p")
    (let* ((last-query (mu4e-last-query))
           (mdir (or (mu4e-my-guess-maildir)
                     (error "Cannot get a current maildir")))
           (mdir-list (or mu4e~maildir-list
                          (mu4e-get-maildirs)))
           (index (- (length mdir-list) (length (member mdir mdir-list))))
           (next-dir (nth (mod (+ index arg) (length mdir-list)) mdir-list)))
      (mu4e~headers-search-execute (concat "maildir:" next-dir) t)))
  (defun mu4e-my-previous-maildir (arg)
    "Move to a previous maildir."
    (interactive "p")
    (mu4e-my-next-maildir (- arg)))

  (define-key mu4e-headers-mode-map (kbd "M-n") 'mu4e-my-next-maildir)
  (define-key mu4e-headers-mode-map (kbd "M-p") 'mu4e-my-previous-maildir)
  (define-key mu4e-view-mode-map (kbd "M-n") 'mu4e-my-next-maildir)
  (define-key mu4e-view-mode-map (kbd "M-p") 'mu4e-my-previous-maildir)
#+END_SRC
*** 送信メールを元メールと同じフォルダにコピーする
thunderbird のこの機能がとっても便利なのでまねしてみる．
#+BEGIN_SRC emacs-lisp +n
  (defun mu4e-my-save-message-in-same-folder ()
    "Save a sent message in same folder as a parent message.
  This function derives from `mu4e~setup-fcc-maybe'."
    (when mu4e-compose-parent-message
      (let* ((mpath (mu4e-message-field mu4e-compose-parent-message :path))
             (fccfile (and mpath
                           (concat (file-name-directory mpath)
                                   (mu4e~draft-message-filename-construct "S")))))
        (when fccfile
          (message-add-header (concat "Fcc: " fccfile "\n"))))))
  (add-hook 'mu4e-compose-mode-hook 'mu4e-my-save-message-in-same-folder)
#+END_SRC
とりあえず作ってみたが，`mu4e-compose-mode-hook' 中で
`mu4e-compose-parent-message' が nil になる．info では使えると書いてあるんだ
が．
*** 動的にアカウントを変更する
[[info:mu4e#Compose%20hooks][info:mu4e#Compose hooks]] を参考にして，返信，転送時などは元のメールに応じて
アカウントを変更することができた．`user-mail-address' を直接設定しているの
で注意．

`compose-new' 時にアカウントを設定する．デフォルトでは `user-mail-address' を
利用するが，前置引数をつけて呼び出すとアカウントを選択することができる．
#+BEGIN_SRC emacs-lisp +n
  (defadvice mu4e-compose-new (before set-account (arg) activate)
    "Before executing `mu4e-commpose-new', set account information.
  If ARG is non-nil, select an account from `mu4e-user-mail-address-list'."
    (interactive "P")
    (if arg
        (mu4e-my-set-account-dynamically)
      (mu4e-my-set-account-dynamically user-mail-address)))
#+END_SRC

返信時に返信元のメールの場所に応じてアカウントを切り替える．
#+BEGIN_SRC emacs-lisp +n
  (defun mu4e-my-change-account-for-maildir ()
    "Change my account according to maildir of a parent message."
    (when mu4e-compose-parent-message
      (let ((mdir (mu4e-message-field mu4e-compose-parent-message :maildir)))
        (cond ((string-match "^/gavo/" mdir)
               (mu4e-my-set-account-dynamically "kai@gavo.t.u-tokyo.ac.jp"))
              ((string-match "^/kbkbkbkb1/" mdir)
               (mu4e-my-set-account-dynamically "kbkbkbkb1@gmail.com"))
              ((string-match "^/cellphone/" mdir)
               (mu4e-my-set-account-dynamically "giovanni-franz@ezweb.ne.jp"))))))
  (add-hook 'mu4e-compose-pre-hook 'mu4e-my-change-account-for-maildir)
#+END_SRC

メールアドレスに応じてアカウント情報を設定するコマンド．
#+BEGIN_SRC emacs-lisp +n
  (defun mu4e-my-set-account-dynamically (&optional address)
    "Set up an account according to ADDRESS.
If ADDRESS is nil, read ADDRESS from `mu4e-user-mail-address-list'."
    (interactive)
    (unless address
      (setq address (completing-read "Mail account: " mu4e-user-mail-address-list
                                     nil t nil nil user-mail-address)))
    (cond ((string= address "kai@gavo.t.u-tokyo.ac.jp")
           (setq mu4e-sent-folder   "/gavo/INBOX.Sent"
                 mu4e-drafts-folder "/gavo/INBOX.Drafts"
                 mu4e-trash-folder  "/gavo/INBOX.Trash"
                 mu4e-sent-messages-behavior  'sent
                 user-mail-address            address
                 smtpmail-stream-type         'ssl
                 smtpmail-smtp-user           "kai"
                 smtpmail-default-smtp-server "smtps.gavo.t.u-tokyo.ac.jp"
                 smtpmail-smtp-server         "smtps.gavo.t.u-tokyo.ac.jp"
                 smtpmail-smtp-service        465
                 smtpmail-local-domain        "gavo.t.u-tokyo.ac.jp"))
          ((string= address "kbkbkbkb1@gmail.com")
           (setq mu4e-drafts-folder "/kbkbkbkb1/[Gmail].下書き"
                 mu4e-sent-folder   "/kbkbkbkb1/[Gmail].送信済みメール"
                 mu4e-trash-folder  "/kbkbkbkb1/[Gmail].ゴミ箱"
                 mu4e-sent-messages-behavior  'sent
                 user-mail-address            address
                 smtpmail-stream-type         'ssl
                 smtpmail-smtp-user           "kbkbkbkb1@gmail.com"
                 smtpmail-default-smtp-server "smtp.gmail.com"
                 smtpmail-smtp-server         "smtp.gmail.com"
                 smtpmail-smtp-service        465
                 smtpmail-local-domain        "gmail.com"))
          ((string= address "giovanni-franz@ezweb.ne.jp")
           (setq mu4e-drafts-folder "/cellphone/[Gmail].下書き"
                 mu4e-sent-folder   "/cellphone/[Gmail].送信済みメール"
                 mu4e-trash-folder  "/cellphone/[Gmail].ゴミ箱"
                 mu4e-sent-messages-behavior  'sent
                 user-mail-address            address
                 smtpmail-stream-type         'ssl
                 smtpmail-smtp-user           "giovanni-franz@auone.jp"
                 smtpmail-default-smtp-server "smtp.gmail.com"
                 smtpmail-smtp-server         "smtp.gmail.com"
                 smtpmail-smtp-service        465
                 smtpmail-local-domain        "ezweb.ne.jp"))
          (t (error (format "Unknown mail address: %s" address)))))
#+END_SRC
*** 独自拡張
org-mode で mu4e のメールへのリンクを作成できる org-mu4e．
#+BEGIN_SRC emacs-lisp +n
  (my-safe-require 'org-mu4e)   ; org-mode との協調
  (add-hook 'mu4e-view-mode-hook 'toggle-truncate-lines)
#+END_SRC

helm で mu4e のフォルダを選択する．
#+BEGIN_SRC emacs-lisp +n
  (defvar helm-c-source-mu4e-maildir
    '((name . "mu4e-maildir")
      (candidates . mu4e-get-maildirs)
      (real-to-display . helm-c-source-mu4e-maildir-real-to-diaplay)
      (action . (("Jump to maildir" . mu4e~headers-jump-to-maildir)
                 ("Insert maildir" . insert)))
      (candidate-number-limit)
      (migemo))
    "Helm source for mu4e maildir.")

  (defun helm-c-source-mu4e-maildir-real-to-diaplay (maildir)
    ""
    (let ((count (with-temp-buffer
                   (shell-command (concat "mu find flag:unread maildir:"
                                          maildir " 2>/dev/null | wc -l")
                                  (current-buffer))
                   (replace-regexp-in-string "\n" "" (buffer-string)))))
      (if (> (string-to-int count) 0)
          (propertize (concat maildir " [" count "]") 'face 'mu4e-unread-face)
        maildir)))

  (defun helm-mu4e-maildir ()
    "Helm command for mu4e maildir."
    (interactive)
    (helm :sources   'helm-c-source-mu4e-maildir
              :buffer    "*helm-mu4e-maildir*"
              :preselect (mu4e-my-guess-maildir)))
  (define-key mu4e-main-mode-map (kbd "f") 'helm-mu4e-maildir)   ; smtpmail-send-queued-mail を上書き
  (define-key mu4e-headers-mode-map (kbd "f") 'helm-mu4e-maildir)
  (define-key mu4e-view-mode-map (kbd "f") 'helm-mu4e-maildir)

  (defun mu4e-my-guess-maildir ()
    "Guess a current maildir from a message at point or last search query.
  If the guess fails, return nil."
    (let ((last-query (mu4e-last-query))
          (maildir-regexp "maildir:\\([^\) \r\n\\]+\\)\\()\\| AND\\|\\\)?")) ; This may be wrong
      (or (ignore-errors (mu4e-field-at-point :maildir))
          (and last-query
               (string-match maildir-regexp last-query)
               (match-string 1 last-query)))))
#+END_SRC

helm でメールアドレスの補完をする．メールアドレスは
`mu4e~contacts-for-completion' に文字列のリストで格納されているので簡単にかけ
た．はじめて history を作ってみたが，まずまず動いていると思う．
`mu4e-my-insert-contact-and-save-history' で直接履歴を保存しているのが少しダ
サイ気がする．
#+BEGIN_SRC emacs-lisp +n
  (defvar mu4e-my-contact-history nil "Contact history for mu4e")

  (defun mu4e-my-insert-contact-and-save-history (candidate)
    "Insert contact and save hisroty"
    (setq mu4e-my-contact-history (delete candidate mu4e-my-contact-history))
    (add-to-list 'mu4e-my-contact-history candidate)
    (insert candidate))

  (defvar helm-c-source-mu4e-my-contact-history
    '((name . "mu4e Contact History")
      (candidates . mu4e-my-contact-history)
      (action . mu4e-my-insert-contact-and-save-history)
      (migemo))
    "Helm source for mu4e contact history.")

  (defvar helm-c-source-mu4e-contact
    '((name . "mu4e Contact Completion")
      (candidates . mu4e~contacts-for-completion)
      (action . mu4e-my-insert-contact-and-save-history)
      (migemo))
    "Helm source for mu4e contact.")

  (defun helm-mu4e-contact ()
    "Helm command for mu4e contact."
    (interactive)
    (helm-other-buffer '(helm-c-source-mu4e-my-contact-history
                             helm-c-source-mu4e-contact)
                           "*helm-mu4e-conntact*"))
  (define-key mu4e-compose-mode-map (kbd "C-c c") 'helm-mu4e-contact)
#+END_SRC

最後のカッコ．
#+BEGIN_SRC emacs-lisp +n
  )
#+END_SRC
** org2blog.el                                                     :noexport:
:PROPERTIES:
:ARCHIVE_TIME: 2014-11-16 Sun 06:06
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[https://github.com/punchagan/org2blog][punchagan/org2blog]]
org-mode 形式のファイルを変換し wordpress に投稿する．marmalade よりインストー
ル．
#+BEGIN_SRC emacs-lisp +n
(my-safe-require 'org2blog
  (setq org2blog/wp-tags-list '("Emacs" "WordPress"))
  (setq org2blog/wp-blog-alist
        `(("wordpress"
           :url "http://www.kaichan.mydns.jp/~kai/wordpress/xmlrpc.php"
           :username "kbkbkbkb1"
           :password "pass"
           :tags-as-categories nil)
          ))
  ;; my function
  (defun org2blog/wp-my-post-current-subtree ()
    "Preview current subtree."
    (interactive)
    (save-excursion
      ;; move to top level of the outline
      (ignore-errors
        (while (> (progn (outline-up-heading 1)
                         (funcall outline-level)) 1)))
      (let ((org2blog/wp-show-post-in-browser nil))
        (org2blog/wp-post-subtree))))
  (defun org2blog/wp-my-post-current-subtree-and-preview ()
    "Preview current subtree."
    (interactive)
    (save-excursion
      ;; move to top level of the outline
      (ignore-errors
        (while (> (progn (outline-up-heading 1)
                         (funcall outline-level)) 1)))
      (let ((org2blog/wp-show-post-in-browser 'show))
        (org2blog/wp-post-subtree))))   ; preview
  (defun org2blog/wp-my-post-current-subtree-and-publish ()
    "Post current subtree."
    (interactive)
    (save-excursion
      ;; move to top level of the outline
      (ignore-errors
        (while (> (progn (outline-up-heading 1)
                         (funcall outline-level)) 1)))
      (let ((org2blog/wp-show-post-in-browser nil))
        (org2blog/wp-post-subtree t)))) ; post

  ;; WP SyntaxHighlighter Evolved を使う時用の設定
  ;; (setq org2blog/wp-use-sourcecode-shortcode t)
  ;; (setq org2blog/wp-sourcecode-default-params "")
  ;; (dolist (lang '("lisp" "clisp" "elisp" "emacs-lisp" "clojure" "scheme"))
  ;;   (add-to-list 'org2blog/wp-sourcecode-langs lang))
  )
#+END_SRC
** calfw.el                                                        :noexport:
:PROPERTIES:
:ARCHIVE_TIME: 2014-11-16 Sun 06:18
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://d.hatena.ne.jp/kiwanami/20110107/1294404952][Emacsでカレンダーコンポーネントを作った - 技術日記＠kiwanami]]
高機能カレンダー．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "https://github.com/kiwanami/emacs-calfw/raw/master/calfw.el")
;; 日本の祝日関連
;; (auto-install-from-url "http://www.meadowy.org/meadow/netinstall/export/799/branches/3.00/pkginfo/japanese-holidays/japanese-holidays.el")
(add-hook 'calendar-load-hook
          (lambda ()
            (my-safe-require 'japanese-holidays)
            (setq calendar-holidays
                  (append japanese-holidays local-holidays other-holidays))))
(setq mark-holidays-in-calendar t)
;; 祝日の設定を先にしてないといけないっぽい
;; (lazyload (my-open-calendar) "calfw"
(lazyload (my-open-calendar) "calfw-cal"
  ;; iCalender形式と連携
  ;; (auto-install-from-url "https://github.com/kiwanami/emacs-calfw/raw/master/calfw-ical.el")
  (my-safe-require 'calfw-ical)

  ;; 2011-06-20 (Mon)
  ;; org-mode と連携
  ;; (auto-install-from-url "https://raw.github.com/kiwanami/emacs-calfw/master/calfw-org.el")
  (my-safe-require 'calfw-org)

  ;; calfw-gcal.el
  ;; かるふわから google カレンダーを編集できる
  ;; (auto-install-from-url "https://github.com/myuhe/calfw-gcal.el/raw/master/calfw-gcal.el")
  (my-safe-require 'calfw-gcal
    (define-key cfw:calendar-mode-map (kbd "a") 'cfw:gcal-main)
    )

  ;; カレンダーを開く関数
  (defun my-open-calendar ()
    (interactive)
    (cfw:open-calendar-buffer
     :view 'month
     :contents-sources
     (list
      (cfw:org-create-source "Seagreen4") ; color
      )))
  )
#+END_SRC
** google 関連                                                     :noexport:
:PROPERTIES:
:ARCHIVE_TIME: 2014-11-16 Sun 06:20
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://maarui.doorblog.jp/archives/6301428.html][まぁるいしっぽ:emacsのカレンダーでgoogle calendarを読み込む]]
カレンダーへのイベント追加はできたが，タイムゾーンが +0:00 になっていまい時間
指定が思い通りにならない．タイムゾーンを指定したいがやり方がわからない．
#+BEGIN_SRC emacs-lisp +n
(my-safe-require 'icalendar)
(my-safe-require 'google-calendar
  (setq google-calendar-user "username")         ;;; GOOGLE USER
  (setq google-calendar-code-directory     ;;; PATH TO THE PYTHON CODE
        (expand-file-name "code"
                          (file-name-directory (locate-library "google-calendar"))))
  (setq google-calendar-directory      "~/tmp")               ;;; TEMPORARY DIRECTORY
  (setq google-calendar-url "http://www.google.com/calendar/ical/username%40gmail.com/private-96087f02e8d133b8d7bab6e5a0712574/basic.ics")  ;;; URL TO YOUR GOOGLE CALENDAR
  (setq google-calendar-auto-update t))
#+END_SRC
** ruby 関連
*** るりまを anything で検索
:PROPERTIES:
:ARCHIVE_TIME: 2014-11-16 Sun 11:23
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ/ruby 関連
:ARCHIVE_CATEGORY: init
:END:
- [[http://d.hatena.ne.jp/rubikitch/20091223/rurima][Rubyリファレンスマニュアル刷新計画（るりま）をanything.elで検索して生産性を
  向上する - (rubikitch loves (Emacs Ruby CUI Books))]]
結構使えるが，anything で選ぶ所の日本語が文字化けしているのと，ヘルプファイル
が少し見にくいのが気になる．リファレンス全体から探したい時は anything で探し
て，実際のメソッドの説明などは rsense の方がいいかもしれない．
#+BEGIN_SRC emacs-lisp +n
  ;; anything-rurima
  ;; (auto-install-from-emacswiki "anything-rurima.el")
  (eval-after-load "anything"
    '(progn
       (my-safe-require 'anything-rurima
         (setq anything-rurima-index-file
               (locate-user-emacs-file "doc/rubydoc/rurima.e"))

         ;; anything-rurima 用のバッファ名変更
         (defun anything-rurima-my-rename-buffer ()
           "Rename anything rurima buffer."
           (when (string-match (expand-file-name
                                "refm" (file-name-directory anything-rurima-index-file))
                               (or buffer-file-name ""))
             (rename-buffer (concat "*anything rurima "
                                    (file-name-nondirectory buffer-file-name)
                                    "*"))))
         (add-hook 'find-file-hook 'anything-rurima-my-rename-buffer)
         ;; popwin で表示
         ;; (eval-after-load "popwin"
         ;;   '(add-to-list 'popwin:special-display-config
         ;;                 '("\\'\\*anything rurima " :regexp t :width 0.4 :position right)))
         ;; popwin で表示できない．バッファ名変更のタイミングが悪いのかも
         )))
#+END_SRC
** anything.el
:PROPERTIES:
:ARCHIVE_TIME: 2014-11-16 Sun 11:26
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
1つでなんでもできる，汎用インターフェース．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-batch "anything")
(my-safe-require 'anything-startup
  (when (executable-find "cmigemo")
    (my-safe-require 'anything-migemo))

  (setq anything-idle-delay 0.1)
  (setq anything-input-idle-delay 0.1)
  (define-key anything-command-map (kbd "o") 'anything-occur)
  (define-key anything-command-map (kbd "a") 'anything-apropos)
  (define-key anything-command-map (kbd "g") 'anything-grep)
  (define-key anything-command-map (kbd "R") 'anything-resume)
  (global-set-key (kbd "C-S-a") 'anything-command-map)
  (eval-after-load "key-chord"
    '(progn
       (defalias 'anything-command-prefix anything-command-map)
       (key-chord-define-global (kbd ":a") 'anything-command-prefix)))
  (add-to-list 'anything-c-source-recentf '(migemo)) ; migemo 化
  (add-to-list 'anything-c-source-buffers+ '(migemo))

  ;; agrep-goto でアウトラインを開くアドバイス
  (defadvice agrep-goto (after org-reveal activate)
     (when (eq major-mode 'org-mode)
        (org-reveal))
     (recenter))
  ;; ミニバッファの履歴を anything で絞込みする
  (define-key minibuffer-local-map (kbd "C-r") 'anything-minibuffer-history)

  ;; prefix で候補を選択可能にする
  (setq anything-enable-shortcuts t)   ; t だと C-number で選択
  ;(define-key anything-map "@" 'anything-select-with-prefix-shortcut)

  ;; for filelist
  ;; (when (linuxp)
  ;;   (setq anything-grep-candidates-fast-directory-regexp "^/tmp")
  ;;   (setq anything-c-filelist-file-name "/tmp/all.filelist"))
  ;; どうも grep 上手くいかない．all.filelist が大きすぎか？
  ;; よし，linux なら locate 使えるので anything-for-files でいいか．current-dir+ も候補に入るし
  (define-key mode-specific-map (kbd "r") 'anything-for-files) ; recentfile 的に使いたい

  ;; anything-show-kill-ring
  (global-set-key (kbd "M-y") 'anything-show-kill-ring)
  (setq anything-kill-ring-threshold 4) ; this variable defines minimum length of strings to show

  ;;;; external elisp

  ;; anything-font-families
  ;; http://d.hatena.ne.jp/mooz/20110320/p1
  (defun anything-font-families ()
    "Preconfigured `anything' for font family."
    (interactive)
    (flet ((anything-mp-highlight-match () nil))
      (anything-other-buffer
       '(anything-c-source-font-families)
       "*anything font families*")))

  (defun anything-font-families-create-buffer ()
    (with-current-buffer
        (get-buffer-create "*Fonts*")
      (loop for family in (sort (delete-duplicates (font-family-list)) 'string<)
            do (insert
                (propertize (concat family "\n")
                            'font-lock-face
                            (list :family family :height 2.0 :weight 'bold))))
      (font-lock-mode 1)))

  (defvar anything-c-source-font-families
        '((name . "Fonts")
          (init lambda ()
                (unless (anything-candidate-buffer)
                  (save-window-excursion
                    (anything-font-families-create-buffer))
                  (anything-candidate-buffer
                   (get-buffer "*Fonts*"))))
          (candidates-in-buffer)
          (get-line . buffer-substring)
          (action
           ("Copy Name" lambda
            (candidate)
            (kill-new candidate))
           ("Insert Name" lambda
            (candidate)
            (with-current-buffer anything-current-buffer
              (insert candidate))))))

  ;;; anything-orgcard.el
  ;;; (auto-install-from-url "https://raw.github.com/gist/1345100/332610ed43c0c310be3281280285fc41b3d4cbdd/anything-orgcard.el")
  ;;; Org-mode のリファレンスカードを使って機能検索 http://d.hatena.ne.jp/kiwanami/20111109/1320857773
  (my-safe-require 'anything-orgcard)

  ;; anything-bibtex
  ;; (auto-install-from-url "https://raw.github.com/gist/1523216/b8060f8c0792988e862a42f27a18e1d4d35d965d/anything-bibtex.el")
  ;; http://d.hatena.ne.jp/k6ky/20111227/1324987106
  (my-safe-require 'anything-bibtex
    (defun anything-bibtex-cite ()
      "Anything command to cite bibliography."
      (interactive)
      (anything-other-buffer
       '(anything-c-source-bibtex)
       "*anything bibtex:")))
  )
#+END_SRC
** edbi.el
:PROPERTIES:
:ARCHIVE_TIME: 2014-11-16 Sun 06:09
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 外部プログラムが必要そうなライブラリ
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp +n
;(my-safe-require 'edbi)
#+END_SRC
** wl.el                                                           :noexport:
:PROPERTIES:
:ARCHIVE_TIME: 2014-05-29 Thu 18:31
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 外部プログラムが必要そうなライブラリ
:ARCHIVE_CATEGORY: init
:END:
Wanderlust メーラー．設定は .wl, .folders でする．
#+BEGIN_SRC emacs-lisp
;; SSL/TLS 用証明書ストアのパス
;(setq ssl-certificate-directory (concat dropbox-directory "/certs"))
(setq ssl-certificate-verification-policy 1)

(autoload 'wl "wl" "Wanderlust" t)
(autoload 'wl-other-frame "wl" "Wanderlust on new frame." t)
(autoload 'wl-draft "wl-draft" "Write draft with Wanderlust." t)
(setq wl-init-file (concat user-emacs-directory ".wl"))
(setq wl-folders-file (concat user-emacs-directory ".folders"))
#+END_SRC

** google-weather
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:22
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
google 天気予報を使う．ロケールを日本にしたいがやり方がわからない．温度表記も
華氏なのでさっぱりわからん．
#+BEGIN_SRC emacs-lisp +n
(use-package google-weather :defer t)
(use-package org-google-weather :defer t)
#+END_SRC

** editable-help.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:22
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://d.hatena.ne.jp/meech/searchdiary?word=%2A%5BEmacs%5D][Emacs - Emacs ひきこもり生活]]
みんなで編集可能な *Help* バッファ．id:meech さんのサーバにファイルを使っている．
#+BEGIN_SRC emacs-lisp +n
;; editable-help.el
;; (auto-install-from-url "https://raw.github.com/gist/614195/dcdf01bcfa3fbd03c38957058e513687c7f3b4ab/editable-help.el")
;;(my-safe-load "editable-help")
#+END_SRC
ヘルプするたびに一々ネット接続しに行くのがうざかったので，コメントアウト．

** key-combo.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:23
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://d.hatena.ne.jp/uk-ar/20120313/1331644314][key-combo v1.3をリリース:post-command-hookを使うelispと併用しても問題ないようにしました - むしゃくしゃしてやった]]
記号入力の補助．
#+BEGIN_SRC emacs-lisp +n
(use-package key-combo :defer t)
#+END_SRC

** menu-tree.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:23
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://www11.atwiki.jp/s-irie/pages/13.html][irie @ ウィキ - menu-tree.el]]
メニューバーを日本語化する．Windows 環境では一部文字化けあり．
#+BEGIN_SRC emacs-lisp +n
;(when window-system
;  (setq menu-tree-coding-system 'utf-8)   ; require の前に設定したほうがよさそう
;  (use-package menu-tree))
#+END_SRC

** emoji.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:23
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[https://github.com/imakado/emoji][imakado/emoji]]

#+BEGIN_SRC emacs-lisp +n
(use-package emoji :defer t
  :bind ("C-x 8 e" . emoji-complete-pictogram)
  :config
  (defvar emoji-my-carrier "ezweb" "My carrier for emoji")
  (defadvice emoji-complete-pictogram (after display-image-buffer activate)
    (emoji-display-images-buffer emoji-my-carrier))
  )
#+END_SRC

** eev
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:23
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
るびきちメルマガより
#+BEGIN_SRC emacs-lisp +n
;;; Emacs ハイパーリンク作戦
;; (add-to-list 'load-path "~/eev-current/")
(use-package eev-all :defer t
  :config
  (global-set-key (kbd "M-e") 'eek-eval-sexp-eol)
  (global-set-key (kbd "M-k") 'kill-this-buffer))
#+END_SRC

** evernote-mode
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:23
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp +n
(use-package evernote-mode
  :config
  (setq evernote-enml-formatter-command '("w3m" "-dump" "-I" "UTF8" "-O" "UTF8"))
  (setq evernote-username "g03090416")
  (global-set-key "\C-c\C-ec" 'evernote-create-note)
  (global-set-key "\C-c\C-eo" 'evernote-open-note)
  (global-set-key "\C-c\C-es" 'evernote-search-notes)
  (global-set-key "\C-c\C-eS" 'evernote-do-saved-search)
  (global-set-key "\C-c\C-ew" 'evernote-write-note)
  (global-set-key "\C-c\C-ep" 'evernote-post-region)
  (global-set-key "\C-c\C-eb" 'evernote-browser)
  )
#+END_SRC

** highlight-indentation
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:23
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp +n
;;; highlight-indentation.el
(use-package highlight-indentation :defer t
  :commands (highlight-indentation-mode highlight-indentation-current-column-mode)
  )
#+END_SRC

** dokuwiki
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:23
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
dokuwiki フロントエンド
#+BEGIN_SRC emacs-lisp +n
;;; 要 simple-wiki.el
(use-package dokuwiki :defer t
  :config
  (setq dokuwiki-username "kai"
        dokuwiki-password "password"
        dokuwiki-base-url "http://"))
#+END_SRC

** vimpulse
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:23
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[https://sites.google.com/site/fudist/Home/vimpulse][Vimpulse / viper-modeの使い方 - fudist]]
vim エミュレータ
#+BEGIN_SRC emacs-lisp +n
;; (use-package vimpulse
;;   :config
;;   (viper-go-away)
;;   (global-set-key (kbd "<M-delete>") 'toggle-viper-mode)
;;   )
#+END_SRC

** yspel.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:23
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://ubulog.blogspot.jp/2010/09/emacs.html][ubulog: Emacsから校正支援する]]
日本語校正支援
#+BEGIN_SRC emacs-lisp +n
;;; git clone git://github.com/yama-natuki/yspel
(use-package yspel :defer t)
#+END_SRC

** bashdb.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:23
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp +n
(autoload 'bashdb "bashdb" "BASH Debugger mode via GUD and bashdb" t)
#+END_SRC

** cycle-buffer.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:24
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
バッファを環状に訪問
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-emacswiki "cycle-buffer.el")
(use-package cycle-buffer
  :config
  (global-set-key (kbd "C-.") 'cycle-buffer)
  (global-set-key (kbd "C-,") 'cycle-buffer-backward)
  )
#+END_SRC

** shell-history.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:24
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
シェルの履歴を履歴ファイルに書きこむ．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "http://www.emacswiki.org/cgi-bin/wiki/download/shell-history.el")
(use-package shell-history
  :config
  (setq shell-history-file "~/.zsh_history")

  ;; add command in shell-mode to history file
  (defadvice comint-send-input (before add-to-shell-history activate)
    (when (eq major-mode 'shell-mode)
      (add-to-shell-history (buffer-substring (point-at-bol) (point-at-eol)))))
  )
#+END_SRC

** cedet.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:24
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://cedet.sourceforge.net/][Collection of Emacs Development Environment Tools Homepage]]
Emacs で開発環境．
#+BEGIN_SRC emacs-lisp +n
(use-package cedet
  (global-ede-mode 1)                      ; Enable the Project management system
  (semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion
  (global-srecode-minor-mode 1)            ; Enable template insertion menu
  )
#+END_SRC

** highlight-80+.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:25
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
指定したカラムを超えているテキストに色付けする．日本語の考慮なし．やっぱ自分で
つくるしかないか．
#+BEGIN_SRC emacs-lisp +n
(use-package highlight-80+ :defer t
  :config
  (setq highlight-80+-columns fill-column))
#+END_SRC

** nyan-mode.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:25
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "https://raw.github.com/TeMPOraL/nyan-mode/master/nyan-mode.el")
(use-package nyan-mode)

#+END_SRC

** judge-indent.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:25
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://d.hatena.ne.jp/yascentur/20110626/1309099966][Emacs でインデント幅とタブ幅を自動判定するマイナーモード judge-indent.el -
  キーボードをたたくとき]]
インデントの幅やタブを操作，モードラインに表示．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "https://raw.github.com/yascentur/judge-indent-el/1.0.0/judge-indent.el")
(use-package judge-indent
  :config
  (global-judge-indent-mode t)
  (setq judge-indent-major-modes '(c-mode python-mode sh-mode)))
#+END_SRC

** kogiku.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:28
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://kogiku.sourceforge.jp/][小菊]]
#+BEGIN_SRC emacs-lisp +n
(use-package kogiku
  :config
  (setq kogiku-enable-once nil))
#+END_SRC

** thing-opt.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:28
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://dev.ariel-networks.com/articles/emacs/part5/][リージョン選択(松山智大) — ありえるえりあ]]
thing を定義，操作する．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "http://www.emacswiki.org/emacs/download/thing-opt.el")
(use-package thing-opt :defer t
  :config
  (define-thing-commands)
  (eval-after-load "key-chord"
    '(progn
       (key-chord-define-global "dw" 'kill-word*)
       (key-chord-define-global "yw" 'copy-word)
       (key-chord-define-global "vw" 'mark-word*)
       (key-chord-define-global "ds" 'kill-sexp*)
       (key-chord-define-global "ys" 'copy-sexp)
       (key-chord-define-global "vs" 'mark-sexp*)
       (key-chord-define-global "dq" 'kill-string)
       (key-chord-define-global "yq" 'copy-string)
       (key-chord-define-global "vq" 'mark-string)
       (key-chord-define-global "dl" 'kill-up-list)
       (key-chord-define-global "yl" 'copy-up-list)
       (key-chord-define-global "vl" 'mark-up-list)))
  )
#+END_SRC

** nav.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:28
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://code.google.com/p/emacs-nav/][emacs-nav - Emacs mode for filesystem navigation - Google Project Hosting]]
ディレクトリのファイル一覧を表示
#+BEGIN_SRC emacs-lisp +n
(use-package nav :defer t)
#+END_SRC

** bookmark-extensions.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:28
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
bookmark.el の拡張．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "http://mercurial.intuxication.org/hg/emacs-bookmark-extension/raw-file/7a874534bc63/bookmark-extensions.el")
;;; anything-bookmark-ext に必要なようだ．多少はブックマークが使いやすくなるのか？
(use-package bookmark-extensions)
#+END_SRC
使い方がよう分からん．

** Inertial-scroll.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:30
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://d.hatena.ne.jp/kiwanami/20101008/1286518936][deferred.el リリース - 技術日記＠kiwanami]]
慣性スクロール．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "http://github.com/kiwanami/emacs-inertial-scroll/raw/master/inertial-scroll.el")
(use-package inertial-scroll
  :config
  (setq inertias-global-minor-mode-map
        (inertias-define-keymap
         '(
           ("<wheel-up>"   . inertias-down-wheel)
           ("<wheel-down>" . inertias-up-wheel)
           ("<mouse-4>"    . inertias-down-wheel)
           ("<mouse-5>"    . inertias-up-wheel)
           ("<next>"  . inertias-up)
           ("<prior>" . inertias-down)
           ("C-v"     . inertias-up)
           ("M-v"     . inertias-down)
           ) inertias-prefix-key))
  (inertias-global-minor-mode 1)
  (setq inertias-initial-velocity 90) ; 初速（大きいほど一気にスクロールする）
  (setq inertias-initial-velocity-wheel 50) ; ホイールの初速（大きいほど一気にスクロールする）
  (setq inertias-friction 200)        ; 摩擦抵抗（大きいほどすぐ止まる）
  (setq inertias-rest-coef 0)         ; 画面端でのバウンド量（0はバウンドしない。1.0で弾性反発）
  (setq inertias-update-time 1)      ; 画面描画のwait時間（msec）
  )
#+END_SRC
見た目はおもろいし、わかりやすくなる。しかし、スクロールするのに多少の時間がかかるので、常用するのは微妙かもしれん。

** switch-window.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:31
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
ウィンドウの移動を番号で指定して移動する．C-x o の代替としてはまあまあいいか
もしれない．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "https://github.com/dimitri/switch-window/raw/master/switch-window.el")
(use-package switch-window :defer t)
#+END_SRC

** matlab-eldoc.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:31
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://d.hatena.ne.jp/uhiaha888/20101108/1289223580][matlabでもel-doc - uhiaha888の日記]]
matlab の引数を表示．
#+BEGIN_SRC emacs-lisp +n
(use-package matlab-eldoc :defer t)
#+END_SRC

** sdic.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:31
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
辞書をひく．
#+BEGIN_SRC emacs-lisp +n
;; (autoload 'sdic-describe-word
;;   "sdic" "英単語の意味を調べる" t nil)
;; (global-set-key  (kbd "C-c d") 'sdic-describe-word)
;; (autoload 'sdic-describe-word-at-point
;;   "sdic" "カーソルの位置の英単語の意味を調べる" t nil)
;; (global-set-key (kbd "C-c D") 'sdic-describe-word-at-point)
;; ;; 英和検索で使用する辞書
;; (setq sdic-eiwa-dictionary-list
;;       '((sdicf-client "~/.emacs.d/dict/gene.sdic")))
;; ;; 和英検索で使用する辞書
;; (setq sdic-waei-dictionary-list
;;       '((sdicf-client "~/.emacs.d/dict/jedict.sdic")))
;; ;; 文字色
;; (setq sdic-face-color "pink")
#+END_SRC

** navi2ch.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:31
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
2ch ビューアー．
#+BEGIN_SRC emacs-lisp +n
(use-package navi2ch
  :commands (navi2ch)
  :config
  (progn
     (defadvice navi2ch-article-next-message (after recenter-after activate)
       (recenter))
     (defadvice navi2ch-article-previous-message (after recenter-after activate)
       (recenter))
     (define-key navi2ch-article-mode-map (kbd "]") 'navi2ch-article-next-link)
     (define-key navi2ch-article-mode-map (kbd "[") 'navi2ch-article-previous-link)
     ))
#+END_SRC

** xdoc2txt.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:31
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://www.bookshelf.jp/soft/meadow_23.html#SEC238][Meadow/Emacs memo: ファイルを開く関連]]
pdf や word のテキスト部分を抽出して表示する．Windows 専用．
#+BEGIN_SRC emacs-lisp +n
;; (when (winp)
;;   (my-safe-load "xdoc2txt.el"))
#+END_SRC

** htmlize.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:31
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
Emacs のハイライトをそのまま html に変換
#+BEGIN_SRC emacs-lisp +n
(use-package htmlize :defer t)
#+END_SRC

** approx-search.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:31
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://www.geocities.co.jp/SiliconValley-PaloAlto/7043/#approx-search.el][(Scheme) (Lisp)]]
曖昧検索できる．
#+BEGIN_SRC emacs-lisp +n
(use-package approx-search
  :config
  (if (boundp 'isearch-search-fun-function)
      (use-package approx-isearch)
    (use-package approx-old-isearch))
  (approx-isearch-set-enable))
#+END_SRC
Migemo との共存がちょっとめんどいので一旦コメントアウト

** sr-speedbar.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:31
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
同一フレーム内に speedbar を作る．そんなに使い方を理解していない．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-emacswiki "sr-speedbar.el")
(use-package sr-speedbar :defer t
  :bind ("H-s" . sr-speedbar-toggle))
#+END_SRC

** cacoo.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:31
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://d.hatena.ne.jp/kiwanami/20110303/1299174459][cacoo.el v2.0 リリース - 技術日記＠kiwanami]]
インライン画像表示 & cacoo編集．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "https://github.com/kiwanami/emacs-deferred/raw/master/deferred.el")
;;; (auto-install-from-url "https://github.com/kiwanami/emacs-deferred/raw/master/concurrent.el")
;;; (auto-install-from-url "https://github.com/kiwanami/emacs-cacoo/raw/master/cacoo.el")
;;; (auto-install-from-url "https://github.com/kiwanami/emacs-cacoo/raw/master/cacoo-plugins.el")
(use-package cacoo :defer t; cacooを読み込み
  :config
  (use-package cacoo-plugins)      ; 追加機能
  ;; 追加設定
  (setq cacoo:img-regexp
        '("\\[img:\\(.*\\)\\][^]\n\r]*$" ; cacoo のデフォルト
          "\\[\\[file:\\([^]\n\r]*\\.\\(jpeg\\|jpg\\|png\\|gif\\)\\)\\]\\(\\[[^]\n\r]*\\]\\)?\\]" ; org-mode のファイルリンクにマッチさせる
          "\\[\\[\\(http:[^]\n\r]*\\.\\(jpeg\\|jpg\\|png\\|gif\\)\\)\\]\\(\\[[^]\n\r]*\\]\\)?\\]" ; org-mode の http リンクにマッチさせる
          ))
  (setq cacoo:external-viewer nil)
  (setq cacoo:img-dir (concat user-emacs-directory ".cacoo-cache"))
  (setq cacoo:img-dir-ok t) ; 画像フォルダは確認無しで作る(my-safe-require 'cacoo
  (global-set-key (kbd "M-c") 'toggle-cacoo-minor-mode)
  (add-to-list 'cacoo:translation-exts "pdf") ; imagemagick で png 形式に変換して表示するファイルの拡張子を登録する
                                              ; デフォルトでは ("ps" "eps" "svg")
  (setq cacoo:png-background "white")
  ;; org-mode のリンクの下線を消す
  ;; http://sheephead.homelinux.org/2011/02/09/6582/
  (defadvice toggle-cacoo-minor-mode
    (around my-toggle-cacoo-minor activate)
    (if (string-equal mode-name "Org")
        (if cacoo-minor-mode
            (progn
              ad-do-it
              (set-face-underline 'org-link t))
          (progn
            (set-face-underline 'org-link nil)
            ad-do-it))
      ad-do-it))
  ;; 別 prefix を定義する
  (define-prefix-command 'cacoo-my-minor-mode-keymap)
  (setq cacoo-my-map-alist
        '(("q" . cacoo:minor-mode-off-command)
          ("n"   . cacoo:navi-next-diagram-command)
          ("p"   . cacoo:navi-prev-diagram-command)

          ("r"   . cacoo:reload-next-diagram-command)
          ("R"   . cacoo:reload-all-diagrams-command)

          ("g"   . cacoo:reload-or-revert-current-diagram-command)

          ("t"   . cacoo:revert-next-diagram-command)
          ("T"   . cacoo:revert-all-diagrams-command)

          ("d"   . cacoo:display-next-diagram-command)
          ("D"   . cacoo:display-all-diagrams-command)

          ("I"   . cacoo:anything-command)
          ("i"   . cacoo:insert-pattern-command)
          ("y"   . cacoo:insert-yank-command)

          ("N"   . cacoo:create-new-diagram-command)
          ("e"   . cacoo:edit-next-diagram-command)
          ("v"   . cacoo:view-next-diagram-command)
          ("V"   . cacoo:view-local-cache-next-diagram-command)

          ("C"   . cacoo:clear-all-cache-files-command)

          ("l"   . cacoo:open-diagram-list-command)))
  (mapc
   (lambda (i)
     (define-key cacoo-my-minor-mode-keymap
       (if (stringp (car i))
           (read-kbd-macro (car i)) (car i))
       (cdr i)))
   cacoo-my-map-alist)
  (define-key cacoo-minor-mode-keymap (kbd "M-c") 'cacoo-my-minor-mode-keymap)
  )
#+END_SRC

** color-theme.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:31
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
Emacs の色付けをいろいろなテーマから選べる． 組み込みのカラーテーマでなかなか
いいのは，
- Clarity and Beauty :: dark 系でわりかし見やすい．自分設定とあまり変わらないか
  も．しかし，モードラインの文字色だけは見にくい．
#+BEGIN_SRC emacs-lisp +n
;;; color-theme.el
;;; (auto-install-from-emacswiki "color-theme.el")
(use-package color-theme :defer t
  :commands (color-theme-select)
  :config
  (color-theme-initialize)
#+END_SRC
*** color-theme-solarized.el
- [[https://github.com/sellout/emacs-color-theme-solarized][sellout/emacs-color-theme-solarized]]
ライトでも，ダークでもいい感じのコントラストのテーマで人気らしい．
#+BEGIN_SRC emacs-lisp +n
  ;; color-theme-solarized
  ;; (use-package color-theme-solarized
  ;;   :config
  ;;   (color-theme-solarized-dark))
  )
#+END_SRC
背景と本文のコントラストが足りなかった．またコメントの色が本文と似ていてわかり
にくいので使うのはやめた．

** pink-bliss.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:31
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
ピンク色カラーテーマ．気分を変えるにはいいが，すぐ飽きる．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-emacswiki "pink-bliss.el")
;; (use-package pink-bliss
;;   :config
;;   (pink-bliss))
#+END_SRC

** smartchr.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:34
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
1つのキーに様々な文字列を割り当てることができる．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "https://github.com/imakado/emacs-smartchr/raw/master/smartchr.el")
;; (use-package smartchr
;;   :config
;;   (global-set-key (kbd "=") (smartchr '(" = " " == " "=")))
;;   (global-set-key (kbd "{") (smartchr '("{`!!'}" "{")))
;;   (global-set-key (kbd "(") (smartchr '("(`!!')" "(")))
;;   )
;; 若干使いにくい。プログラミングの時だけ有効とかにしたほうがいいか
#+END_SRC

** viewer.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:34
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
view-mode を便利に．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-emacswiki "viewer.el")
(use-package viewer :defer t
  :config
  (setq view-read-only t)
  ;; 書き込み不能なファイルはview-modeで開くように
  (viewer-stay-in-setup)
  ;; 特定のファイルは view-mode で開く
  (setq view-mode-by-default-regexp "\\.log$")
  ;; view-mode ではカーソル色を青にする
  ;; Emacs24 の view-mode でカーソルが青くなるのは
  ;; ibus.el の設定で、ibus が使えないときにカーソルが
  ;; 青くなるからだった。
  ;; (when (<= emacs-major-version 23)
  ;;   (defadvice view-mode (before set-view-mode-cursor-color activate)
  ;;     "Before execute view-mode, set cursor-color blue."
  ;;     (if view-mode
  ;;         (set-cursor-color "yellow")
  ;;       (set-cursor-color "blue"))))
  ;; 結局ややこしいのでつけないことにした

  ;; view-mode の時モードラインを色づけ
  (setq viewer-mode-line-color-unwritable "tomato")
  (setq viewer-mode-line-color-view "orange")
  ;; root ユーザ時はモードラインの色を変える
  (setq viewer-mode-line-color-root "magenta")
  ;; root のため条件を書き加えるために関数を再定義
  (defun viewer-change-mode-line-color ()
    (interactive)
    (when (eq (selected-window)
              (get-buffer-window (current-buffer)))
      (set-face-background
       'mode-line
       (cond ((and buffer-file-name view-mode
                   (not (file-writable-p buffer-file-name)))
              viewer-mode-line-color-unwritable)
             (view-mode
              viewer-mode-line-color-view)
             ((let ((name (or list-buffers-directory (buffer-file-name))))
                (and (tramp-tramp-file-p name)
                     (string= (tramp-file-name-real-user (tramp-dissect-file-name name))
                              "root")))
              viewer-mode-line-color-root)
             (t
              viewer-mode-line-color-default)))))

  (viewer-change-mode-line-color-setup)
  ;; 閲覧用キーマップ
  (defvar pager-keybind
    `( ;; vi-like
      ("h" . backward-char)
      ("l" . forward-char)
      ("k" . previous-line)
      ("j" . next-line)
      ("K" . ,(lambda () (interactive) (previous-line 4)))
      ("J" . ,(lambda () (interactive) (next-line 4)))
      ("0" . move-beginning-of-line)
      ("^" . back-to-indentation)
      ("$" . move-end-of-line)
      ;; ("b" . inertias-up)               ; inertial-scroll に変更。微妙か。
      ;; ("f" . inertias-down)
      ("b" . scroll-down)
      ("f" . scroll-up)
      ;("\C-u" . ,(lambda () (interactive) (scroll-down (/ (window-height) 2))))
      ;("\C-d" . ,(lambda () (interactive) (scroll-up (/ (window-height) 2))))
      ("p" . ,(lambda (arg) (interactive "p") (scroll-down arg)))
      ("n" . ,(lambda (arg) (interactive "p") (scroll-up arg)))
      ;("y" . ,(lambda () (interactive) (scroll-down 1)))
      ("e" . jaunte)
      ("g" . ,(lambda (line) (interactive "p") (goto-line line)))
      ("G" . end-of-buffer)
      ("M" . move-to-window-line-top-bottom)
      ("H" . ,(lambda () (interactive) (move-to-window-line 0)))
      ("L" . ,(lambda () (interactive) (move-to-window-line -1)))
      ("z" . recenter-top-bottom)
      ;; bm-easy
      ("m" . bm-toggle)
      ("[" . bm-previous)
      ("]" . bm-next)
      ;; langhelp-like
      ("c" . scroll-other-window-down)
      ("v" . scroll-other-window)
      ))
  (defun define-many-keys (keymap key-table &optional includes)
    (let (key cmd)
      (dolist (key-cmd key-table)
        (setq key (car key-cmd)
              cmd (cdr key-cmd))
        (if (or (not includes) (member key includes))
            (define-key keymap key cmd))))
    keymap)

  (defun view-mode-hook0 ()
    (define-many-keys view-mode-map pager-keybind)
    ;;(hl-line-mode 1)
    (define-key view-mode-map " " 'scroll-up))
  (add-hook 'view-mode-hook 'view-mode-hook0)
  )
#+END_SRC

** bm.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:34
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
可視ブックマークをつける。たぶん本来のブックマークとは違うけど。
#+BEGIN_SRC emacs-lisp +n
(use-package bm :defer t
  :bind (("M-M" . bm-toggle)
         ("M-[" . bm-previous)
         ("M-]" . bm-next))
  :config
  (setq-default bm-buffer-persistence t)
  (setq bm-restore-repository-on-load t)
  (setq bm-highlight-style 'bm-highlight-only-fringe)  ; fringe にのみ表示
  (add-hook 'after-init-hook 'bm-repository-load)
  (add-hook 'find-file-hooks 'bm-buffer-restore)
  (add-hook 'after-revert-hook 'bm-buffer-restore)
  (add-hook 'kill-buffer-hook 'bm-buffer-save)
  (add-hook 'after-save-hook 'bm-buffer-save)
  (add-hook 'kill-emacs-hook '(lambda ()
                                (bm-buffer-save-all)
                                (bm-repository-save)))
  )
#+END_SRC

** slime
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:34
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
Common Lisp 用マイナーモード．HyperSpec という Common Lisp 用のリファレンスが
あるらしいのでいつか入れよう．
#+BEGIN_SRC emacs-lisp +n
;;; $ cvs -d :pserver:anonymous:anonymous@common-lisp.net:/project/slime/cvsroot co slime
(use-package slime :defer t
  :init
  (setq inferior-lisp-program "clisp")
  :config
  (slime-setup)
  ;; 日本語利用
  (setq slime-net-coding-system 'utf-8-unix)
  ;; カーソル付近にある単語の情報を表示
  ;;(slime-autodoc-mode)
  )
#+END_SRC

** xdvi-search.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:34
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
Emacs から xdvi に飛ぶ．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "http://xdvi.sourceforge.net/xdvi-search.el")
(use-package xdvi-search :defer t
  :config
  (add-hook 'yatex-mode-hook
            '(lambda ()
               (YaTeX-define-key (kbd "C-d") 'xdvi-jump-to-line)))
  ;; xdvi-jump-to-line しても xdvi にフォーカスが移らないので、移るようにする
  ;; 簡易すぎるので複数 xdvi が立ち上がっているとダメかも？
  ;; はじめて defadvice を使ったが便利ちゃんだ
  (defadvice xdvi-jump-to-line (after xdvi-search-focus-to-xdvi activate)
    "After xdvi-jum-to-line, focus to xdvik"
    (shell-command "wmctrl -a xdvi")))
;; --src-special の指定はお忘れなく
;; TeX-master というローカル変数を相対パスで指定する（もしくは ~ を含めると
;; いけないのかもしれない）とうまく動かないので注意
#+END_SRC

** minibuf-isearch.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:34
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
minibufferで履歴検索．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "http://www.sodan.org/~knagano/emacs/minibuf-isearch/minibuf-isearch.el")
(use-package minibuf-isearch :defer t)
#+END_SRC

** latex-math-preview.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:34
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://www16.atwiki.jp/ytk5/pages/13.html][ytk5 @ ウィキ - latex-math-preview.el]]
tex 中の数式をプレビューする．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-emacswiki "latex-math-preview.el")
(use-package latex-math-preview :defer t
  :commands (latex-math-preview-expression
             latex-math-preview-insert-symbol
             latex-math-preview-save-image-file
             latex-math-preview-beamer-frame)
  :config
  (add-hook 'yatex-mode-hook
            '(lambda ()
               (YaTeX-define-key "\C-p" 'latex-math-preview-expression)
               ;; (YaTeX-define-key "\C-p" 'latex-math-preview-save-image-file)
               (define-key YaTeX-mode-map (kbd "C-c j") 'latex-math-preview-insert-symbol)
               (YaTeX-define-key "\C-j" 'latex-math-preview-last-symbol-again)
               (YaTeX-define-key "\C-f" 'latex-math-preview-beamer-frame)
               ))
  (setq latex-math-preview-in-math-mode-p-func 'YaTeX-in-math-mode-p) ; 数式の判断に yatex のものを使う
  ;; 用いるパッケージ
  (setq latex-math-preview-latex-template-header
        "\\documentclass{article}
\\pagestyle{empty}
\\usepackage{amsmath,amssymb,amsthm}
\\usepackage{bm}")
  ;; プレビューする書式を追加
  (add-to-list 'latex-math-preview-match-expression
               '(0 . "\\\\begin{table\\(\\|\\*\\)}\\(\\(.\\|\n\\)*?\\)\\\\end{table\\(\\|\\*\\)}")) ; table 環境
  ;; latex ではなく platex を使用するように変更．また， dvipng だと日本語非対応なので gs-to-png にする。のは無理だった。
  (setq latex-math-preview-tex-to-png-for-preview '(platex dvipng))
  (setq latex-math-preview-tex-to-png-for-save '(platex dvipng))
  ;(setq latex-math-preview-tex-to-png-for-preview '(platex dvips-to-eps gs-to-png))
  ;(setq latex-math-preview-tex-to-png-for-save '(platex dvipdfmx gs-to-png))
  (setq latex-math-preview-tex-to-eps-for-save '(platex dvips-to-eps))
  (setq latex-math-preview-tex-to-ps-for-save '(platex dvips-to-ps))
  (setq latex-math-preview-beamer-to-png '(platex dvipdfmx gs-to-png))

  ;; (add-to-list 'latex-math-preview-command-option-alist '(gs-to-png "-q" "-dSAFER" "-dNOPAUSE" "-dBATCH" "-sDEVICE=png16m" "-dEPSCrop" "-r600"))
  )
#+END_SRC

** twittering-mode.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:34
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
Emacs でツイッター．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "https://github.com/hayamiz/twittering-mode/raw/master/twittering-mode.el")
(use-package twittering-mode :defer t
  :config
  ;(setq twittering-use-master-password t)
  (setq twittering-auth-method 'xauth)
  (setq twittering-username "kbkbkbkb1")
  (setq twittering-icon-mode t)
  (setq twittering-fill-column 50)
  (setq twittering-status-format "%i %s / %S,  %@:\n%FOLD{%T}\n  from %f%L%r%R\n ") ; 表示のフォーマット

  (setq twittering-initial-timeline-spec-string ;   最初からから開くタイムライン
        '(":home"
          ":search/emacs/"
          ":search/keysnail/"))
  ;; バッファ名に [twitter] を追加する
  ;(defadvice twittering-start (after my-twittering-start-add-buffer-name activate)
  ;  (rename-buffer (concat (buffer-name) " [twitter]")))
  ; :home にしか追加されなかった．どの関数にアドバイスすればいいかわからん・・・
  )
#+END_SRC

** jaunte.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:34
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://kawaguchi.posterous.com/emacshit-a-hint][EmacsでHit a Hint(改) - Leave Me In Emacs]]
Hit a Hint でカーソル移動するライブラリ．
#+BEGIN_SRC emacs-lisp +n
;;; jaunte.el
;;; (auto-install-from-url "https://raw.github.com/kawaguchi/jaunte.el/master/jaunte.el")
(use-package jaunte
  :config
  (setq jaunte-keys (mapcar #'identity "asdfghjkl"))
  (setq jaunte-hint-unit 'symbol)
  (define-key mode-specific-map "e" 'jaunte) ; C-c e で Hit a Hint 移動
 
  ;; info では参照のみを対象とする
  (defun my-jaunte-forward-word ()
    "Move to beginning of a forward word, and return point."
    (interactive)
    (if (eq major-mode 'Info-mode)
        (progn
          (Info-next-reference)
          (point))
      (if (looking-at "\\w")
          (forward-thing jaunte-hint-unit))
      (if (re-search-forward "\\w" nil 'eob)
          (backward-char))
      (point)))
  (defalias 'jaunte-forward-word 'my-jaunte-forward-word)
  )
#+END_SRC

** postit.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:34
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://web.archive.org/web/19981202211943/www.is.s.u-tokyo.ac.jp/~tama/source.html][Tama's Softwares]]
ファイルにポストイット
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "http://chasen.org/~daiti-m/dist/postit.el")
(use-package postit)
#+END_SRC
今のところあまりつかっていない

** text-adjust.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:34
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://d.hatena.ne.jp/rubikitch/20090220/text_adjust][全角文字と半角文字の間に自動でスペースを開ける text-adjust.el を使ってみ
  た - (rubikitch loves (Emacs Ruby CUI Books))]]
テキストの細かいところを修正し，統一する
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "http://taiyaki.org/elisp/mell/src/mell.el")
;;; (auto-install-from-url "http://taiyaki.org/elisp/text-adjust/src/text-adjust.el")
;; (use-package text-adjust)
;; ファイル保存時に自動的に text-adjust を起動する
;; (defun text-adjust-before-save-if-needed ()
;;   (when (memq major-mode
;;               '(org-mode text-mode change-log-mode yatex-mode))
;;     (text-adjust-buffer)))
;; (defalias 'spacer 'text-adjust-space-buffer)
;; (add-hook 'before-save-hook 'text-adjust-before-save-if-needed)
;; ソースファイルの時なんかに勝手に整形するのは危険なのでコメントアウト
#+END_SRC

** windows.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:34
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
ウィンドウの分割情報を保存する．revive.el もあったほうがいい．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "http://www.gentei.org/~yuuji/software/windows.el")
;;; (auto-install-from-url "http://www.gentei.org/~yuuji/software/revive.el")
;; prefix 変更。require の前にしないといけないっぽい
(use-package windows :defer t
  :init
  (setq win:switch-prefix "\C-z")
  (setq win:use-frame nil)   ; 新規にフレームを作らない
  :config
  ;(win:startup-with-window)               ; 起動時に window1 を選択する？
  (define-key ctl-x-map (kbd "C-c") 'see-you-again)
  (define-key ctl-x-map (kbd "C") 'save-buffers-kill-emacs)
  (global-set-key (kbd "C-S-n") 'win-next-window)
  (global-set-key (kbd "C-S-p") 'win-prev-window)
  ;; revive.el によりレジューム
  ;(add-hook 'after-init-hook 'resume-windows)      ; 起動時にレジュームする
  ;; これをつけるとエラーが起きる。なんか bm のところで止まってる？
  ;; 少々めんどいが毎回手作業でレジュームすることにする
  ;; (aset win:names-prefix 2 "tex") ; なんとなくこれでウィンドウタイトルを変えられそう
  )
#+END_SRC

** shell-command.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:35
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
シェルの強化．
#+BEGIN_SRC emacs-lisp +n
;;; (auto-install-from-url "http://namazu.org/~tsuchiya/elisp/shell-command.el")
(use-package shell-command :defer t
  :config
  (shell-command-completion-mode))
#+END_SRC

** display-deadline.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:35
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp +n
(use-package display-deadline
  :config
  (display-deadline "進捗報告まであと%d日%h時間%m分" (encode-time 0 0 10 15 11 2010)))
#+END_SRC

** yatex.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:35
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp +n
;; yatex-mode の起動
(use-package yatex :defer t
  :mode "\\.tex\\'"
  :init
  (setq YaTeX-inhibit-prefix-letter t)    ; prefix を C-c C-英字 にする．1 にすると C-c 大文字英字 が無効になる
  :config
  (progn
    (setq YaTeX-user-completion-table
          (locate-user-emacs-file ".yatexrc"))
    (setq tex-command "latexmk -pdfdvi -pv"       ; latexmk は複数回のコンパイル支援
          makeindex-command "mendex"
          bibtex-command "pbibtex"
          dviprint-command-format "dvipdfmx %s"
          dvi2-command "pxdvi -geo +0+0 -s 4" ; xdvi='pxdvi' のエイリアスをはってるのだが，
                                        ; このコマンドはエイリアスを見てくれないようなので直接指定する
          YaTeX-kanji-code nil  ;; 文章作成時の日本語文字コード
          ;; 0: no-converion
          ;; 1: Shift JIS (windows & dos default)
          ;; 2: ISO-2022-JP (other default)
          ;; 3: EUC
          ;; 4: UTF-8
          ;; nil: automatic
          )
    (setq YaTeX-use-AMS-LaTeX t)            ; ams パッケージの補完を可能にする
    (setq YaTeX-skip-default-reader t)      ; setction 型の命令の引数指定をスキップする
    (setq YaTeX-help-file
          (expand-file-name "YATEXHLP.jp" (file-name-directory (locate-library "yatex"))))
    (setq YaTeX-help-file-private
          (locate-user-emacs-file "doc/YATEXHLP-private.jp"))

    (put 'YaTeX-parent-file 'safe-local-variable
         (lambda (x)
           (string-match "\.tex$" x)))
    ;; auto-complete-latex.el
    ;; http://d.hatena.ne.jp/tequilasunset/20100424/p1
    ;; https://bitbucket.org/tequilasunset/auto-complete-latex/src
    ;; (use-package auto-complete-latex
    ;;   :config
    ;;   (setq ac-l-dict-directory
    ;;         (expand-file-name "ac-l-dict/"
    ;;                           (file-name-directory (locate-library "auto-complete-latex"))))
    ;;   (add-hook 'yatex-mode-hook 'ac-l-setup))
    ;; 少々重すぎる
#+END_SRC
*** begin-end 型のコマンドに名前をつける
#+BEGIN_SRC emacs-lisp +n
    (defun YaTeX-define-begend-key-with-name (key env &optional map)
      "Define YaTeX-make-begin-end command with name and bind it."
      (let ((func (intern (format "YaTeX-make-begin-end-%s" env))))
        (fset func
              `(lambda (arg)
                 ,(format "Make LaTeX environment command of \\begin{%s} ... \\end{%s}."
                         env env)
                 (interactive "P")
                 (YaTeX-insert-begin-end ,env arg)))
        (YaTeX-define-key key func map)))

    (loop for (key envname)
         in '(("ba" "align") ("bc" "center") ("bd" "document") ("bD" "description")
              ("be" "enumerate") ("bE" "equation") ("bf" "frame") ("bg" "gather")
              ("bi" "itemize") ("bl" "flushleft") ("bm" "minipage") ("bt" "tabbing")
              ("bT" "tabular") ("b\^t" "table") ("bp" "picture") ("bq" "quote")
              ("bQ" "quotation") ("br" "flushright") ("bv" "verbatim") ("bV" "verse"))
          do (YaTeX-define-begend-key-with-name key envname))
#+END_SRC
*** その他
#+BEGIN_SRC emacs-lisp +n
    ;; popwin との協調
    (eval-after-load "popwin"
      '(progn
         (defadvice YaTeX-help (around YaTeX-help-no-select activate)
           (let (cbuffer (current-buffer))
             ad-do-it
             (switch-to-buffer cbuffer)
             (and (get-buffer-window YaTeX-help-buffer)
                  (select-window (get-buffer-window YaTeX-help-buffer)))))
         (defadvice YaTeX-apropos (after YaTeX-apropos-no-select activate)
           (and (get-buffer-window YaTeX-help-buffer)
                (select-window (get-buffer-window YaTeX-help-buffer))))))

    ;; (setq YaTeX-sectioning-indent 2)
    ;; (setq YaTeX-environment-indent 2)
    (add-hook 'yatex-mode-hook          ; every time hook when yatex-mode is executed
              '(lambda ()
                 (auto-fill-mode 1)         ; auto-fill-mode enabled
                 (reftex-mode 1)            ; reftex-mode enabled
                 (define-key reftex-mode-map (kbd "C-c /") nil) ; enable `yatex-apropos'
                 (flyspell-mode 1)          ; flyspell-mode enabled
                 (outline-minor-mode 1)
                 ;; setting for outline-minor-mode
                 (setq outline-level 'latex-outline-level)
                 (setq outline-regexp-alist
                       '(("documentclass" . -2)
                         ("part" . -1)
                         ("chapter" . 0)
                         ("section" . 1)
                         ("subsection" . 2)
                         ("subsubsection" . 3)
                         ("begin{frame}" . 4)
                         ("paragraph" . 4)
                         ("subparagraph" . 5)
                         ("appendix" . 0)))
                 (setq outline-regexp
                       (concat "[ \t]*\\\\\\("
                               (mapconcat 'car outline-regexp-alist "\\|")
                               "\\)\\*?"))
                 ))))

(add-hook 'yatex-mode-load-hook     ; one time hook when yatex.el is loaded
          '(lambda ()
             (define-key YaTeX-mode-map (kbd "<backtab>") 'outline-my-global-cycle)
             (define-key YaTeX-mode-map (kbd "C-c C-p") 'outline-previous-visible-heading)
             (define-key YaTeX-mode-map (kbd "C-c C-n") 'outline-next-visible-heading)
             (YaTeX-my-set-sectioning-face)
             ))

(defun YaTeX-my-set-sectioning-face ()
  ""
  (custom-set-faces
   ;; YaTeX-sectioning-0 is #6a5acd
   '(YaTeX-sectioning-0 ((((class color)) (:foreground "#d9d900" :background "#6a5acd" :height 1.4))))
   '(YaTeX-sectioning-1 ((((class color)) (:foreground "#d9d900" :background "#2a5acd" :height 1.4))))
   '(YaTeX-sectioning-2 ((((class color)) (:foreground "#d9d900" :background "#2a2acd" :height 1.4))))
   '(YaTeX-sectioning-3 ((((class color)) (:foreground "#d9d900" :background "#aa33cd" :height 1.4))))
   '(YaTeX-sectioning-4 ((((class color)) (:foreground "#d9d900" :background "#aa5a6a" :height 1.4))))
   '(YaTeX-sectioning-5 ((((class color)) (:foreground "#d9d900" :background "#aa006a" :height 1.4))))
   '(YaTeX-sectioning-6 ((((class color)) (:foreground "#d9d900" :background "#5a5a5a" :height 1.4))))
   ))

;; function to find hierarchy for LaTeX
(defun latex-outline-level ()
  (save-excursion
    (looking-at outline-regexp)
    (let* ((title (buffer-substring-no-properties (match-beginning 1) (match-end 1))))
      (if (assoc title outline-regexp-alist)
          (assoc-default title outline-regexp-alist)
        (length title)))))

;; cycle outline level
(defun outline-my-cycle-level ()
  (interactive)
  (when (outline-on-heading-p)
    (beginning-of-line)
    (let* ((visible-eol (save-excursion (move-end-of-line nil) (point)))
           (eos (save-excursion (outline-end-of-subtree) (point)))
           (cur-level (funcall outline-level))
           (next-level (save-excursion (outline-next-heading)
                                       (when (outline-on-heading-p)
                                         (funcall outline-level))))
           (has-children (and next-level (< cur-level next-level))))
      (if (and (eq visible-eol eos))
          (progn
            (show-children)
            (show-entry)
            (message (if has-children "CHILDREN" "SUBTREE (NO CHILDREN)")))
        (if (and has-children
                 (save-excursion (outline-next-heading)
                                 (= (next-overlay-change (point)) (point-at-eol))))
            (progn (show-subtree)
                   (message "SUBTREE"))
          (hide-subtree)
          (message "FOLDED")
          )))
    ;(hide-leaves)
    ;(outline-end-of-heading)
    ;(outline-end-of-subtree)
    ))
(defadvice YaTeX-indent-line (around cycle-heading activate)
  "If cursor is on outline heading, cycle heading. Otherwise indent line."
  (if (outline-on-heading-p)
      (outline-my-cycle-level)
    ad-do-it))

(defun outline-my-global-cycle ()
  (interactive)
  (if (eq last-command 'outline-my-global-cycle)
        (hide-sublevels 1000)
    (hide-sublevels 1))
  )
#+END_SRC

** dabbrev-ja.el
:PROPERTIES:
:ARCHIVE_TIME: 2015-01-23 Fri 05:35
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
日本語でも快適に動的略語展開．
#+BEGIN_SRC emacs-lisp +n
(use-package dabbrev-ja :defer t)
#+END_SRC
** lookup.el
** matlab.el
:PROPERTIES:
:ARCHIVE_TIME: 2014-05-29 Thu 18:21
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 外部プログラムが必要そうなライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://d.hatena.ne.jp/uhiaha888/20100815/1281888552][emacsでmatlab - uhiaha888の日記]]
#+BEGIN_SRC emacs-lisp
(autoload 'matlab-mode "matlab" "Enter MATLAB mode." t)
(autoload 'matlab-shell "matlab" "Interactive MATLAB mode." t)
(setq auto-mode-alist (delete '("\\.m\\'" . objc-mode) auto-mode-alist)) ; .m ファイルが object-c に解釈されないようにする
(add-to-list 'auto-mode-alist '("\\.m\\'" . matlab-mode))
(setq matlab-shell-command "/usr/local/bin/matlab"
      matlab-shell-command-swithes '("-nodesktop -v=glnx86")
      matlab-indent-level 4
      matlab-indent-function-body nil
      matlab-highlight-cross-function-variables t
      matlab-return-add-semicolon t
      matlab-show-mlint-warnings t
      mlint-programs '("/usr/local/matlab75/bin/glnx86/mlint")
      matlab-mode-install-path (list (expand-file-name "/usr/local/matlab75/")))
(autoload 'mlint-minor-mode "mlint" nil t)
(add-hook 'matlab-mode-hook (lambda ()
                              (mlint-minor-mode 1)
                              ;; config about face for mlint
                              (set-face-background 'linemark-go-face "gray40")
                              (set-face-background 'linemark-funny-face "red")
                              ))
;; mlint しようとすると， linemark.el が必要らしいが，require したらしたで
;; おかしいので使わないようにしよう．
;; cedet から linemark.el だけコピーしてロードしたら何とか動くようだ．
(add-hook 'matlab-mode-hook (lambda () (auto-fill-mode 0)))
(add-hook 'matlab-shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-hook 'matlab-shell-mode-hook
           (lambda () (setenv "LANG" "C")))
(eval-after-load "shell"
  '(define-key shell-mode-map [down] 'comint-next-matching-input-from-input))
(eval-after-load "shell"
  '(define-key shell-mode-map [up] 'comint-previous-matching-input-from-input))
(eval-after-load "matlab"
  '(progn
     (define-key matlab-mode-map (kbd "M-;") 'nil))) ; matlab-mode で dwim-comment をつかう
     ;; (define-key matlab-shell-mode-map (kbd "<tab>") 'ac-complete)
     ;; (define-key matlab-shell-mode-map (kbd "C-<tab>") 'matlab-shell-tab)))

(defface ac-matlab-candidate-face
  '((t (:background "PaleGreen" :foreground "black")))
  "Face for matlab candidate."
  :group 'auto-complete)

(defface ac-matlab-selection-face
  '((t (:background "DarkGreen" :foreground "white")))
  "Face for matlab selected candidate."
  :group 'auto-complete)

(defun matlab-complete-symbol-list (&optional arg)
  (interactive "P")
  ;(matlab-navigation-syntax
    (let* ((prefix (if (and (not (eq last-command 'matlab-complete-symbol))
                            (member (preceding-char) '(?  ?\t ?\n ?, ?\( ?\[ ?\')))
                       ""
                     (buffer-substring-no-properties
                      (save-excursion (forward-word -1) (point))
                      (point))))
           (sem (matlab-lattr-semantics prefix)))
      (if (not (eq last-command 'matlab-complete-symbol))
          (setq matlab-last-prefix prefix
                matlab-last-semantic sem
                matlab-completion-search-state
                (cond ((eq sem 'solo)
                       '(matlab-solo-completions

                         matlab-find-user-functions
                         matlab-find-recent-variable))
                      ((eq sem 'boolean)
                       '(matlab-find-recent-variable
                         matlab-boolean-completions
                         matlab-find-user-functions
                         matlab-value-completions))
                      ((eq sem 'value)
                       '(matlab-find-recent-variable
                         matlab-find-user-functions
                         matlab-value-completions
                         matlab-boolean-completions))
                      ((eq sem 'property)
                       '(matlab-property-completions
                         matlab-find-user-functions
                         matlab-find-recent-variable
                         matlab-value-completions))
                      (t '(matlab-find-recent-variable
                           matlab-find-user-functions
                           matlab-value-completions
                           matlab-boolean-completions)))))

      (let ((allsyms (apply 'append
                            (mapcar (lambda (f) (funcall f prefix))
                                    matlab-completion-search-state))))
        (matlab-uniquafy-list allsyms))))

(defvar ac-source-matlab
  '((candidates
     . (lambda ()
         (matlab-complete-symbol-list)))
    (candidate-face . ac-matlab-candidate-face)
    (selection-face . ac-matlab-selection-face)
    ))

(defvar ac-source-matlab-functions nil
  "Souce for matlab functions.")
(setq ac-source-matlab-functions
      '((candidates . (list "zeros" "ones" "eye" "mean" "exp" "length" "save" "normpdf" "plot"
                            "size" "print" "sum" "prod" "inv" "diag" "rand" "randn" "linspace"
                            "logspace" "length" "any" "all" "find" "reshape" "meshgrid" "char"
                            "deblank" "double" "strcmp" "strncmp" "isletter" "isspace" "findstr"
                            "strrep" "int2str" "num2str" "str2num" "dec2hex" "dec2bin" "hex2dec"
                            "bin2dec" "mat2str" "eval" "tic" "toc" "figure" "hold" "subplot"
                            "fplot" "title" "xlabel" "ylabel" "text" "gtext" "grid" "axis"
                            "legend" "set" "get" "bar" "barh" "area" "pie" "hist" "stem"
                            "staris" "compass" "feather" "quiver" "contour" "ginput" "drawnow"
                            "image" "imagesc" "image" "imread" "fill" "fprintf" "fopen"
                            "fclose" "fgetl" "feof" "fwrite" "fread"))
        (document . ac-matlab-function-documentation)
        (symbol . "f")))

(defun ac-matlab-function-documentation (fnc)
  "Show document of matlab function."
  (condition-case nil
      (matlab-shell-collect-command-output (concat "help " fnc))
    (error "You need to run the command `matlab-shell' to read help!")))


(add-hook 'matlab-mode-hook
          (lambda ()
            (add-to-list 'ac-sources 'ac-source-matlab)
            (add-to-list 'ac-sources 'ac-source-matlab-functions)
            (dolist (source '(ac-source-features ac-source-functions
                                                 ac-source-variables ac-source-symbols))
              (setq ac-sources (delq source ac-sources)))
            (key-chord-define matlab-mode-map "df" 'matlab-shell-describe-command)
            (key-chord-define matlab-mode-map "dv" 'matlab-shell-describe-variable)
            (key-chord-define matlab-mode-map "AA" 'matlab-shell-apropos)
            ))

(add-hook 'matlab-shell-mode-hook
          (lambda ()
            (add-to-list 'ac-sources 'ac-source-matlab)
            (add-to-list 'ac-sources 'ac-source-matlab-functions)
            (dolist (source '(ac-source-features ac-source-functions
                                                 ac-source-variables ac-source-symbols))
              (setq ac-sources (delq source ac-sources)))
            (key-chord-define matlab-shell-mode-map "df" 'matlab-shell-describe-command)
            (key-chord-define matlab-shell-mode-map "dv" 'matlab-shell-describe-variable)
            (key-chord-define matlab-shell-mode-map "AA" 'matlab-shell-apropos)
            ))




;;; プロンプトじゃない場所から comint-previous-input を
;;; 実行したとき，プロンプトに移動する
;;; 2011-06-30 (Thu)
(defadvice comint-previous-input
  (before comint-previous-input-anywhere activate)
  (if (not (comint-after-pmark-p))
      (end-of-buffer)))
#+END_SRC



** e2wm.el
:PROPERTIES:
:ARCHIVE_TIME: 2018-04-03 Tue 01:56
:ARCHIVE_FILE: ~/.emacs.d/org-init.d/init.org
:ARCHIVE_OLPATH: 非標準ライブラリ
:ARCHIVE_CATEGORY: init
:END:
- [[http://d.hatena.ne.jp/kiwanami/20100528/1275038929][広くなった画面を有効利用できる、Emacs内Window管理ツール e2wm.el を作ってみた。
  （旧名称 ewm.el） - 技術日記＠kiwanami]]
IDE的なウィンドウ管理をしてくれるライブラリ．設定されているレイアウトに従って
ウィンドウが配置され，他のレイアウトにも簡単に切り替えたりできる．
#+BEGIN_SRC emacs-lisp +n
;; e2wm.el
(use-package e2wm
  :bind ("M-+" . e2wm:start-management)
  :config
  (setq e2wm:override-window-ext-managed t) ; elscreen とかを使っている場合は t とのこと
#+END_SRC
どうも elscreen などのフレーム制御系のライブラリと相性が悪そう．
*** e2wm-vcs.el
- [[http://d.hatena.ne.jp/kiwanami/20110702/1309592243][e2wm の magit パースペクティブ - 技術日記＠kiwanami]]
magit 用のパースペクティブ．
#+BEGIN_SRC emacs-lisp +n
  ;; e2wm-vcs.el
  (use-package e2wm-vcs :defer t))
#+END_SRC
